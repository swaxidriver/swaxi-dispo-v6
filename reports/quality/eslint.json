[{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/.trunk/configs/svgo.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/babel.config.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/jest.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/jest.setup.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/jest.setup.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/postcss.config.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/postcss.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/public/sw.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/scripts/check-imports.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/scripts/quality.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/App.jsx","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":74,"fix":{"range":[73,73],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":13,"column":1,"nodeType":"ImportDeclaration","endLine":13,"endColumn":39,"fix":{"range":[657,657],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":15,"column":1,"nodeType":"ImportDeclaration","endLine":15,"endColumn":44,"fix":{"range":[720,720],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"`react` import should occur before import of `./contexts/AuthContext`","line":15,"column":1,"nodeType":"ImportDeclaration","endLine":15,"endColumn":44}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":3,"source":"import { BrowserRouter as Router, Routes, Route } from 'react-router-dom'\nimport { AuthProvider } from './contexts/AuthContext'\nimport { ShiftProvider } from './contexts/ShiftContext'\nimport { ThemeProvider } from './contexts/ThemeContext'\nimport Navigation from './components/Navigation'\nimport LiveVersionBanner from './components/LiveVersionBanner'\nimport AutosaveManager from './components/AutosaveManager'\nimport Dashboard from './pages/Dashboard'\nimport Calendar from './pages/Calendar'\nimport Administration from './pages/Administration'\nimport Audit from './pages/Audit'\nimport TestPage from './pages/TestPage'\nimport Login from './components/Login'\nimport './App.css'\nimport { useState, useEffect } from 'react'\nimport ErrorBoundary from './components/ErrorBoundary'\n\nfunction LoadingSkeleton() {\n  return (\n    <div className=\"animate-pulse space-y-4 p-6\">\n      <div className=\"h-6 bg-gray-300 rounded w-1/3\" />\n      <div className=\"h-4 bg-gray-200 rounded w-1/2\" />\n      <div className=\"h-64 bg-gray-200 rounded\" />\n    </div>\n  )\n}\n\n// Build metadata injected by Vite define() (see vite.config.js)\n/* global __APP_VERSION__, __APP_COMMIT__ */\nconst APP_VERSION = typeof __APP_VERSION__ !== 'undefined' ? __APP_VERSION__ : 'dev'\nconst APP_COMMIT = typeof __APP_COMMIT__ !== 'undefined' ? __APP_COMMIT__ : 'local'\n\nfunction Footer() {\n  return (\n    <footer className=\"mt-auto py-4 text-center text-sm text-gray-500\">\n  <p>swaxi Dispo v{APP_VERSION} ({APP_COMMIT}) • {new Date().getFullYear()}</p>\n    </footer>\n  )\n}\n\nfunction App() {\n  const [ready, setReady] = useState(false)\n  useEffect(() => {\n    // minimal defer to allow ShiftProvider bootstrap; could watch context instead\n    const t = setTimeout(() => setReady(true), 50)\n    return () => clearTimeout(t)\n  }, [])\n  return (\n    <AuthProvider>\n      <ThemeProvider>\n        <ShiftProvider>\n          <Router basename=\"/swaxi-dispo-v6\">\n            <div className=\"min-h-screen bg-brand-bg text-brand-text flex flex-col\">\n              <LiveVersionBanner />\n              <Navigation />\n              <ErrorBoundary>\n                <main id=\"main-content\" className=\"flex-1\" role=\"main\">\n                  {ready ? (\n                    <Routes>\n                      <Route path=\"/\" element={<Dashboard />} />\n                      <Route path=\"/calendar\" element={<Calendar />} />\n                      <Route path=\"/admin\" element={<Administration />} />\n                      <Route path=\"/audit\" element={<Audit />} />\n                      <Route path=\"/test\" element={<TestPage />} />\n                      <Route path=\"/login\" element={<Login />} />\n                    </Routes>\n                  ) : <LoadingSkeleton />}\n                </main>\n              </ErrorBoundary>\n              <Footer />\n              <AutosaveManager />\n            </div>\n          </Router>\n        </ShiftProvider>\n      </ThemeProvider>\n    </AuthProvider>\n  )\n}\n\nexport default App\n","usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/components/AutosaveManager.jsx","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":52,"fix":{"range":[51,51],"text":"\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { useState, useEffect, useRef } from 'react'\n// Corrected import: useShifts is defined in its own hook file, not exported from ShiftContext\nimport { useShifts } from '../contexts/useShifts'\n\nconst DEFAULT_AUTOSAVE_INTERVAL = 30000 // 30 seconds\nconst DEFAULT_MAX_SNAPSHOTS = 10 // Keep last 10 snapshots\n\n/**\n * AutosaveManager\n * Responsibilities:\n *  - Periodically snapshot relevant shift/application/notification state to localStorage (ring buffer limited)\n *  - Offer recovery UI when unsaved work + recent snapshot present\n *  - Export & housekeeping (cleanup oldest) actions\n * Known limitations (acceptable for now):\n *  - Snapshot diffing heuristic is simplistic (signature by lengths); could hash payload for deeper dedupe.\n */\nexport default function AutosaveManager({\n  intervalMs = DEFAULT_AUTOSAVE_INTERVAL,\n  maxSnapshots = DEFAULT_MAX_SNAPSHOTS,\n  enableLogging = false,\n  dedupeSnapshots = false, // if true, identical (by simple signature) consecutive snapshots are skipped\n} = {}) {\n  const { state } = useShifts()\n  const [lastSave, setLastSave] = useState(null)\n  const [isRecovering, setIsRecovering] = useState(false)\n  const [availableSnapshots, setAvailableSnapshots] = useState([])\n  const [showRecoveryPanel, setShowRecoveryPanel] = useState(false)\n  const lastSignatureRef = useRef(null)\n\n  // Auto-save functionality\n  useEffect(() => {\n    const saveSnapshot = () => {\n      try {\n        // Build a simple signature to avoid redundant identical snapshots\n        const signature = [\n          state.shifts.length,\n          state.applications.length,\n          state.notifications.length,\n          state.lastActivity || 0,\n        ].join(':')\n        if (dedupeSnapshots) {\n          if (signature === lastSignatureRef.current) return\n          lastSignatureRef.current = signature\n        }\n\n        const now = Date.now()\n        const dataSource = typeof state.dataSource === 'string'\n          ? state.dataSource\n          : (state.dataSource?.source || 'localStorage')\n\n        const snapshot = {\n          id: now,\n          timestamp: new Date(now).toISOString(),\n          data: {\n            shifts: state.shifts,\n            applications: state.applications,\n            notifications: state.notifications,\n            lastActivity: state.lastActivity,\n          },\n          dataSource,\n          changeCount: state.shifts.length + state.applications.length,\n        }\n\n        const existingSnapshots = JSON.parse(localStorage.getItem('swaxi-autosave-snapshots') || '[]')\n        const updatedSnapshots = [snapshot, ...existingSnapshots].slice(0, maxSnapshots)\n\n        localStorage.setItem('swaxi-autosave-snapshots', JSON.stringify(updatedSnapshots))\n        localStorage.setItem('swaxi-last-autosave', JSON.stringify({\n          timestamp: snapshot.timestamp,\n          changeCount: snapshot.changeCount,\n        }))\n\n        setLastSave(new Date(snapshot.timestamp))\n        setAvailableSnapshots(updatedSnapshots)\n        if (enableLogging) console.log('📸 Autosave: Snapshot erstellt', snapshot.id)\n      } catch (error) {\n        if (enableLogging) console.error('❌ Autosave Fehler:', error)\n      }\n    }\n\n    // Initial save (after mount / state updates)\n    saveSnapshot()\n    const interval = setInterval(saveSnapshot, intervalMs)\n    return () => clearInterval(interval)\n  }, [state.shifts, state.applications, state.notifications, state.dataSource, state.lastActivity, intervalMs, maxSnapshots, enableLogging, dedupeSnapshots])\n\n  // Load snapshots on component mount\n  useEffect(() => {\n    try {\n      const snapshots = JSON.parse(localStorage.getItem('swaxi-autosave-snapshots') || '[]');\n      setAvailableSnapshots(snapshots);\n      \n      const lastSaveInfo = JSON.parse(localStorage.getItem('swaxi-last-autosave') || 'null');\n      if (lastSaveInfo) {\n        setLastSave(new Date(lastSaveInfo.timestamp));\n      }\n    } catch (error) {\n      console.error('Error loading snapshots:', error);\n    }\n  }, []);\n\n  // Check for recovery on app start\n  useEffect(() => {\n    const checkForRecovery = () => {\n      try {\n        const hasUnsavedWork = localStorage.getItem('swaxi-unsaved-work');\n        const snapshots = JSON.parse(localStorage.getItem('swaxi-autosave-snapshots') || '[]');\n        \n        if (hasUnsavedWork && snapshots.length > 0) {\n          const lastSnapshot = snapshots[0];\n          const timeSinceLastSnapshot = Date.now() - new Date(lastSnapshot.timestamp).getTime();\n          \n          // If last snapshot is recent (< 5 minutes), offer recovery\n          if (timeSinceLastSnapshot < 300000) {\n            setShowRecoveryPanel(true);\n          }\n        }\n      } catch (error) {\n        console.error('Error checking for recovery:', error);\n      }\n    };\n\n    // Check after a short delay to let the app initialize\n    setTimeout(checkForRecovery, 1000);\n  }, []);\n\n  const recoverFromSnapshot = async (snapshotId) => {\n    try {\n      setIsRecovering(true);\n      const snapshot = availableSnapshots.find(s => s.id === snapshotId);\n      \n      if (!snapshot) {\n        throw new Error('Snapshot nicht gefunden');\n      }\n\n      // Here you would dispatch actions to restore the state\n      // For demo purposes, we'll just show a success message\n      console.log('🔄 Wiederherstellung von Snapshot:', snapshot);\n      \n      // Simulate recovery process\n      await new Promise(resolve => setTimeout(resolve, 1500));\n      \n      setShowRecoveryPanel(false);\n      setIsRecovering(false);\n      \n      // Clear unsaved work flag\n      localStorage.removeItem('swaxi-unsaved-work');\n      \n      alert(`✅ Daten erfolgreich wiederhergestellt!\\n\\nSnapshot vom: ${new Date(snapshot.timestamp).toLocaleString('de-DE')}\\nDatenquelle: ${snapshot.dataSource}`);\n    } catch (error) {\n      console.error('❌ Wiederherstellung fehlgeschlagen:', error);\n      alert('❌ Wiederherstellung fehlgeschlagen: ' + error.message);\n      setIsRecovering(false);\n    }\n  };\n\n  const deleteSnapshot = (snapshotId) => {\n    try {\n      const updatedSnapshots = availableSnapshots.filter(s => s.id !== snapshotId);\n      localStorage.setItem('swaxi-autosave-snapshots', JSON.stringify(updatedSnapshots));\n      setAvailableSnapshots(updatedSnapshots);\n    } catch (error) {\n      console.error('Error deleting snapshot:', error);\n    }\n  };\n\n  const exportSnapshots = () => {\n    try {\n      const exportData = {\n        snapshots: availableSnapshots,\n        exportTime: new Date().toISOString(),\n        version: '6.0.0'\n      };\n      \n      const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });\n      const url = URL.createObjectURL(blob);\n      \n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `swaxi-snapshots-${new Date().toISOString().split('T')[0]}.json`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n    } catch (error) {\n      console.error('Export failed:', error);\n    }\n  };\n\n  const formatTimeAgo = (timestamp) => {\n    const now = new Date();\n    const time = new Date(timestamp);\n    const diffMs = now - time;\n    const diffMins = Math.floor(diffMs / 60000);\n    const diffHours = Math.floor(diffMs / 3600000);\n    \n    if (diffMins < 1) return 'gerade eben';\n    if (diffMins < 60) return `vor ${diffMins} Min`;\n    if (diffHours < 24) return `vor ${diffHours} Std`;\n    return time.toLocaleDateString('de-DE');\n  };\n\n  // Recovery Panel\n  // Recovery overlay (keep separate so indicator still mounts for consistent layout if needed later)\n  const recoveryOverlay = showRecoveryPanel && (\n    <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50\" data-testid=\"recovery-overlay\">\n      <div className=\"relative top-20 mx-auto p-5 border w-11/12 md:w-3/4 lg:w-1/2 shadow-lg rounded-md bg-white\">\n        <div className=\"text-center\">\n          <div className=\"mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-yellow-100 mb-4\">\n            <span className=\"text-2xl\">🔄</span>\n          </div>\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n            Ungespeicherte Änderungen erkannt\n          </h3>\n          <p className=\"text-sm text-gray-500 mb-4\">\n            Es wurden automatische Snapshots gefunden. Möchten Sie Ihre Arbeit wiederherstellen?\n          </p>\n\n          <div className=\"max-h-48 overflow-y-auto mb-4 text-left\">\n            {availableSnapshots.slice(0, 5).map((snapshot) => (\n              <div key={snapshot.id} className=\"flex items-center justify-between p-3 border rounded-md mb-2\">\n                <div>\n                  <div className=\"text-sm font-medium\">\n                    {new Date(snapshot.timestamp).toLocaleString('de-DE')}\n                  </div>\n                  <div className=\"text-xs text-gray-500\">\n                    {snapshot.data.shifts.length} Dienste • {snapshot.dataSource}\n                  </div>\n                </div>\n                <button\n                  onClick={() => recoverFromSnapshot(snapshot.id)}\n                  disabled={isRecovering}\n                  className=\"ml-3 inline-flex items-center px-3 py-1 border border-transparent text-xs font-medium rounded-md text-white bg-brand-primary hover:bg-brand-primary/80 disabled:opacity-50\"\n                >\n                  {isRecovering ? 'Lädt...' : 'Wiederherstellen'}\n                </button>\n              </div>\n            ))}\n          </div>\n\n          <div className=\"flex flex-wrap justify-center gap-2 mb-4\">\n            <button\n              onClick={() => setShowRecoveryPanel(false)}\n              className=\"px-4 py-2 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400\"\n            >\n              Überspringen\n            </button>\n            <button\n              onClick={() => {\n                localStorage.removeItem('swaxi-unsaved-work')\n                setShowRecoveryPanel(false)\n              }}\n              className=\"px-4 py-2 bg-brand-primary text-white rounded-md hover:bg-brand-primary/80\"\n            >\n              Neu beginnen\n            </button>\n            <button\n              onClick={exportSnapshots}\n              className=\"px-4 py-2 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200\"\n            >\n              Export\n            </button>\n            {availableSnapshots.length > 3 && (\n              <button\n                onClick={() => deleteSnapshot(availableSnapshots[availableSnapshots.length - 1].id)}\n                className=\"px-4 py-2 bg-red-100 text-red-700 rounded-md hover:bg-red-200\"\n              >\n                Bereinigen\n              </button>\n            )}\n          </div>\n          <div className=\"text-xs text-gray-500\">{availableSnapshots.length} Snapshots verfügbar</div>\n        </div>\n      </div>\n    </div>\n  )\n\n  // Auto-save status indicator (shown in corner)\n  return (\n    <>\n      <div className=\"fixed bottom-4 right-4 z-40\">\n        <div className=\"bg-white shadow-lg rounded-lg p-3 border border-gray-200\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n            <span className=\"text-xs text-gray-600\">\n              Autosave: {lastSave ? formatTimeAgo(lastSave) : 'Initialisierung...'}\n            </span>\n            <button\n              onClick={() => setShowRecoveryPanel(true)}\n              className=\"text-xs text-brand-primary hover:text-brand-primary/80\"\n              title=\"Snapshots verwalten\"\n            >\n              📸\n            </button>\n          </div>\n          {availableSnapshots.length > 0 && (\n            <div className=\"mt-2 text-xs text-gray-500\">\n              {availableSnapshots.length} Snapshots verfügbar\n            </div>\n          )}\n        </div>\n      </div>\n      {recoveryOverlay}\n    </>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/components/ConnectionStatus.jsx","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":34,"fix":{"range":[33,33],"text":"\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { useState } from 'react';\nimport { useShifts } from '../contexts/useShifts';\n\nexport default function ConnectionStatus() {\n  const { state } = useShifts();\n  const [testing, setTesting] = useState(false);\n\n  const handleTestConnection = async () => {\n    setTesting(true);\n    try {\n      // Placeholder connection test – always false for now\n      const isOnline = false;\n      console.log('Connection test result:', isOnline ? 'SharePoint available' : 'SharePoint not available');\n    } catch (error) {\n      console.error('Connection test failed:', error);\n    } finally {\n      setTesting(false);\n    }\n  };\n\n  const getStatusIcon = () => {\n    if (state.dataSource === 'sharePoint' && state.isOnline) {\n      return '🟢'; // Green - SharePoint connected\n    } else if (state.dataSource === 'localStorage') {\n      return '🟡'; // Yellow - localStorage mode\n    } else {\n      return '🔴'; // Red - error state\n    }\n  };\n\n  const getStatusText = () => {\n    if (state.dataSource === 'sharePoint' && state.isOnline) {\n      return 'SharePoint verbunden';\n    } else if (state.dataSource === 'localStorage') {\n      return 'Offline-Modus (localStorage)';\n    } else {\n      return 'Verbindungsfehler';\n    }\n  };\n\n  return (\n    <div className=\"flex items-center space-x-3 bg-white p-3 rounded-lg shadow-sm border\">\n      <div className=\"flex items-center space-x-2\">\n        <span className=\"text-lg\">{getStatusIcon()}</span>\n        <span className=\"text-sm font-medium text-gray-700\">\n          {getStatusText()}\n        </span>\n      </div>\n      \n      {state.lastSync && (\n        <span className=\"text-xs text-gray-500\">\n          Letzte Sync: {state.lastSync.toLocaleTimeString('de-DE')}\n        </span>\n      )}\n      \n      <button\n        onClick={handleTestConnection}\n        disabled={testing}\n        className=\"btn-secondary text-xs px-2 py-1\"\n      >\n        {testing ? '🔄 Test läuft...' : '🔗 Verbindung testen'}\n      </button>\n\n      {/* Development Info */}\n      {state.dataSource === 'localStorage' && (\n        <div className=\"text-xs text-gray-500 bg-yellow-50 px-2 py-1 rounded\">\n          💡 Tipp: Funktioniert automatisch im Stadtwerke-Netzwerk\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/components/ErrorBoundary.jsx","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":34,"fix":{"range":[33,33],"text":"\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { Component } from 'react'\nimport { logError } from '../utils/logger'\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { error: null }\n  }\n  static getDerivedStateFromError(error) {\n    return { error }\n  }\n  componentDidCatch(error, info) {\n    const payload = {\n      message: error?.message || String(error),\n      stack: error?.stack,\n      componentStack: info?.componentStack,\n      time: new Date().toISOString(),\n      version: '6.0.1'\n    }\n    logError('ErrorBoundary captured error', payload)\n    // TODO: send to remote telemetry endpoint when available\n  }\n  handleReload = () => {\n    window.location.reload()\n  }\n  render() {\n    const { error } = this.state\n    if (error) {\n      return (\n        <div role=\"alert\" className=\"p-6 text-red-700 bg-red-50 rounded\">\n          <h2 className=\"font-semibold mb-2\">Ein Fehler ist aufgetreten</h2>\n          <pre className=\"text-xs whitespace-pre-wrap\">{String(error.message || error)}</pre>\n          <button className=\"mt-3 bg-brand-primary text-white px-3 py-1 rounded\" onClick={this.handleReload}>Neu laden</button>\n        </div>\n      )\n    }\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundary\n","usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/components/LiveVersionBanner.jsx","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":45,"fix":{"range":[44,44],"text":"\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { useState, useEffect } from 'react';\n// Lightweight env shim (avoids direct process reference for lint in browser context)\nconst __env = (typeof globalThis !== 'undefined' && globalThis.process && globalThis.process.env)\n  ? globalThis.process.env\n  : { NODE_ENV: 'development' };\nimport { useShifts } from '../contexts/useShifts';\n\nexport default function LiveVersionBanner() {\n  const { state } = useShifts();\n  const [isVisible, setIsVisible] = useState(true);\n  const [buildInfo, setBuildInfo] = useState(null);\n\n  useEffect(() => {\n    // Get build information\n    const buildTime = new Date().toLocaleString('de-DE');\n    const version = '6.0.0'; // Static version for now\n  // Use NODE_ENV for environment to keep Jest (CJS) compatibility instead of import.meta.env\n  const environment = __env.NODE_ENV === 'production' ? 'production' : 'development';\n    \n    setBuildInfo({\n      version,\n      buildTime,\n      environment,\n      gitHash: 'latest', // Simplified for demo\n      dataSource: state.dataSource?.source || 'localStorage'\n    });\n  }, [state.dataSource]);\n\n  const handleDismiss = () => {\n    setIsVisible(false);\n    // Remember dismissal for session\n    sessionStorage.setItem('bannerDismissed', 'true');\n  };\n\n  // Check if banner was previously dismissed\n  useEffect(() => {\n    const wasDismissed = sessionStorage.getItem('bannerDismissed');\n    if (wasDismissed) {\n      setIsVisible(false);\n    }\n  }, []);\n\n  if (!isVisible || !buildInfo) return null;\n\n  const getDataSourceIcon = () => {\n    switch (buildInfo.dataSource) {\n      case 'sharePoint':\n        return '☁️';\n      case 'localStorage':\n        return '💾';\n      default:\n        return '🔄';\n    }\n  };\n\n  const getEnvironmentBadge = () => {\n    if (buildInfo.environment === 'production') {\n      return (\n        <span className=\"inline-flex items-center rounded-full bg-green-100 px-2.5 py-0.5 text-xs font-medium text-green-800\">\n          🚀 Live\n        </span>\n      );\n    }\n    return (\n      <span className=\"inline-flex items-center rounded-full bg-yellow-100 px-2.5 py-0.5 text-xs font-medium text-yellow-800\">\n        🧪 Demo\n      </span>\n    );\n  };\n\n  return (\n    <div className=\"relative isolate flex items-center gap-x-6 overflow-hidden bg-gradient-to-r from-brand-primary to-brand-secondary px-6 py-2.5 sm:px-3.5 sm:before:flex-1\">\n      <div className=\"flex flex-wrap items-center gap-x-4 gap-y-2\">\n        <div className=\"flex items-center gap-x-2\">\n          {getEnvironmentBadge()}\n          <span className=\"text-sm font-semibold text-white\">\n            Swaxi Dispo v{buildInfo.version}\n          </span>\n        </div>\n        \n        <div className=\"flex items-center gap-x-4 text-sm text-white/90\">\n          <span className=\"flex items-center gap-x-1\">\n            {getDataSourceIcon()}\n            {buildInfo.dataSource === 'sharePoint' ? 'SharePoint' : 'Demo Modus'}\n          </span>\n          \n          <span className=\"hidden sm:block\">\n            Build: {buildInfo.buildTime}\n          </span>\n          \n          {buildInfo.gitHash !== 'dev' && (\n            <span className=\"hidden md:block font-mono text-xs\">\n              #{buildInfo.gitHash.substring(0, 7)}\n            </span>\n          )}\n        </div>\n\n        {buildInfo.environment === 'production' && buildInfo.dataSource === 'localStorage' && (\n          <div className=\"flex items-center gap-x-2 text-sm text-orange-200\">\n            <span className=\"animate-pulse\">⚠️</span>\n            <span>Offline Modus - Daten werden lokal gespeichert</span>\n          </div>\n        )}\n      </div>\n\n      <div className=\"flex flex-1 justify-end\">\n        <button\n          type=\"button\"\n          onClick={handleDismiss}\n          className=\"flex-none rounded-md bg-white/10 p-1 text-white/80 hover:bg-white/20 hover:text-white\"\n          aria-label=\"Banner schließen\"\n        >\n          <span className=\"sr-only\">Banner schließen</span>\n          <svg className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth=\"1.5\" stroke=\"currentColor\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M6 18L18 6M6 6l12 12\" />\n          </svg>\n        </button>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/components/Login.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/components/MiniAnalytics.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/components/Navigation.jsx","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":35,"fix":{"range":[177,177],"text":"\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { NavLink } from 'react-router-dom'\n// reference to satisfy strict unused var rule in certain test contexts\nconst _navLinkRef = NavLink\nimport { useContext } from 'react'\nimport AuthContext from '../contexts/AuthContext'\n\nfunction classNames(...classes) {\n  return classes.filter(Boolean).join(' ')\n}\n\nexport default function Navigation() {\n  const auth = useContext(AuthContext)\n  const role = auth?.user?.role\n  const isAdmin = role === 'admin' || role === 'chief'\n  const navigation = [\n    { name: 'Dashboard', href: '/' },\n    { name: 'Kalender', href: '/calendar' },\n    isAdmin && { name: 'Verwaltung', href: '/admin' },\n    isAdmin && { name: 'Audit', href: '/audit' },\n    { name: '🧪 Test', href: '/test' },\n  ].filter(Boolean)\n\n  return (\n    <nav className=\"bg-brand-primary\">\n      <div className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex h-16 justify-between\">\n          <div className=\"flex\">\n            <div className=\"flex flex-shrink-0 items-center\">\n              <span className=\"text-white font-bold text-xl\">swaxi</span>\n            </div>\n            <div className=\"hidden sm:ml-6 sm:flex sm:space-x-8\">\n              {navigation.map((item) => (\n                <NavLink\n                  key={item.name}\n                  to={item.href}\n                  end={item.href === '/'}\n                  className={({ isActive }) =>\n                    classNames(\n                      isActive\n                        ? 'border-brand-accent text-white'\n                        : 'border-transparent text-gray-300 hover:border-gray-300 hover:text-white',\n                      'inline-flex items-center border-b-2 px-1 pt-1 text-sm font-medium'\n                    )\n                  }\n                >\n                  {item.name}\n                </NavLink>\n              ))}\n              {!auth?.user && (\n                <NavLink\n                  to=\"/login\"\n                  className={({ isActive }) =>\n                    classNames(\n                      isActive ? 'border-brand-accent text-white' : 'border-transparent text-gray-300 hover:border-gray-300 hover:text-white',\n                      'inline-flex items-center border-b-2 px-1 pt-1 text-sm font-medium'\n                    )\n                  }\n                >Login</NavLink>\n              )}\n              {auth?.user && (\n                <button\n                  onClick={auth.logout}\n                  className=\"inline-flex items-center border-b-2 border-transparent px-1 pt-1 text-sm font-medium text-gray-300 hover:text-white hover:border-gray-300\"\n                >Logout ({auth.user.role})</button>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </nav>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/components/NotificationMenu.jsx","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":55,"fix":{"range":[140,140],"text":"\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { Fragment } from 'react'\nimport { Menu, Transition } from '@headlessui/react'\nimport { BellIcon } from '@heroicons/react/24/outline'\n// linter reference\nconst _refs = [Menu, Transition, BellIcon]\nimport { useShifts } from '../contexts/useShifts'\n\nexport default function NotificationMenu() {\n  const { state, markNotificationRead, markAllNotificationsRead } = useShifts();\n\n  return (\n    <Menu as=\"div\" className=\"relative inline-block text-left\">\n      <Menu.Button className=\"flex items-center rounded-full bg-gray-50 p-1 text-gray-400 hover:text-gray-600\">\n        <span className=\"sr-only\">View notifications</span>\n        <BellIcon className=\"h-6 w-6\" aria-hidden=\"true\" />\n        {state.notifications && state.notifications.length > 0 && (\n          <span className=\"absolute top-0 right-0 block h-2 w-2 rounded-full bg-red-400 ring-2 ring-white\" />\n        )}\n      </Menu.Button>\n\n      <Transition\n        as={Fragment}\n        enter=\"transition ease-out duration-100\"\n        enterFrom=\"transform opacity-0 scale-95\"\n        enterTo=\"transform opacity-100 scale-100\"\n        leave=\"transition ease-in duration-75\"\n        leaveFrom=\"transform opacity-100 scale-100\"\n        leaveTo=\"transform opacity-0 scale-95\"\n      >\n        <Menu.Items className=\"absolute right-0 z-10 mt-2 w-80 origin-top-right rounded-md bg-white py-1 shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none\">\n          {state.notifications?.length > 0 && (\n            <div className=\"px-3 py-1 flex justify-end border-b border-gray-100 text-xs\">\n              <button onClick={markAllNotificationsRead} className=\"text-blue-600 hover:underline\">Alle gelesen</button>\n            </div>\n          )}\n          {state.notifications && state.notifications.map((notification) => (\n            <Menu.Item key={notification.id}>\n              {({ active }) => (\n                <div\n                  className={`\n                    ${active ? 'bg-gray-100' : ''}\n                    px-4 py-2 text-sm text-gray-700\n                  `}\n                >\n                  <p className=\"font-medium flex justify-between items-center\">\n                    <span>{notification.title}</span>\n                    {!notification.isRead && (\n                      <button onClick={() => markNotificationRead(notification.id)} className=\"ml-2 text-xs text-blue-600 hover:underline\">Gelesen</button>\n                    )}\n                  </p>\n                  <p className=\"text-gray-500\">{notification.message}</p>\n                  <p className=\"text-xs text-gray-400 mt-1 flex justify-between items-center\">\n                    <span>{notification.timestamp}</span>\n                    {!notification.isRead && <span className=\"w-2 h-2 rounded-full bg-blue-500 inline-block\" />}\n                  </p>\n                </div>\n              )}\n            </Menu.Item>\n          ))}\n          {(!state.notifications || state.notifications.length === 0) && (\n            <div className=\"px-4 py-2 text-sm text-gray-500\">\n              Keine neuen Benachrichtigungen\n            </div>\n          )}\n        </Menu.Items>\n      </Transition>\n    </Menu>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/components/RoleManagement.jsx","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":34,"fix":{"range":[33,33],"text":"\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { useState } from 'react';\nimport { ROLES } from '../utils/constants';\nimport { canManageShifts } from '../utils/auth';\n\nconst roleDescriptions = {\n  [ROLES.ADMIN]: 'Vollzugriff inkl. Audit-Log und Rollenverwaltung',\n  [ROLES.CHIEF]: 'Dienste anlegen, zuweisen und Vorlagen bearbeiten',\n  [ROLES.DISPONENT]: 'Dienste sehen und sich bewerben',\n  [ROLES.ANALYST]: 'Nur Lesezugriff und Analytics',\n};\n\nexport default function RoleManagement({ users, onUpdateRole }) {\n  const [editingUser, setEditingUser] = useState(null);\n\n  const handleRoleChange = (userId, newRole) => {\n    onUpdateRole(userId, newRole);\n    setEditingUser(null);\n  };\n\n  const getRoleBadgeColor = (role) => {\n    switch (role) {\n      case ROLES.ADMIN:\n        return 'bg-purple-100 text-purple-800';\n      case ROLES.CHIEF:\n        return 'bg-blue-100 text-blue-800';\n      case ROLES.DISPONENT:\n        return 'bg-green-100 text-green-800';\n      case ROLES.ANALYST:\n        return 'bg-gray-100 text-gray-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  return (\n    <div className=\"bg-white shadow overflow-hidden sm:rounded-md\">\n      <ul className=\"divide-y divide-gray-200\">\n        {users.map((user) => (\n          <li key={user.id}>\n            <div className=\"px-4 py-4 sm:px-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"text-sm font-medium text-brand-primary\">\n                  {user.name}\n                </div>\n                <div className=\"ml-2 flex-shrink-0 flex items-center space-x-2\">\n                  {editingUser === user.id ? (\n                    <select\n                      value={user.role}\n                      onChange={(e) => handleRoleChange(user.id, e.target.value)}\n                      className=\"block w-full rounded-md border-0 py-1.5 pl-3 pr-10 text-gray-900 ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-brand-primary sm:text-sm sm:leading-6\"\n                    >\n                      {Object.values(ROLES).map((role) => (\n                        <option key={role} value={role}>\n                          {role}\n                        </option>\n                      ))}\n                    </select>\n                  ) : (\n                    <>\n                      <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${getRoleBadgeColor(user.role)}`}>\n                        {user.role}\n                      </span>\n                      {canManageShifts(user.role) && (\n                        <button\n                          onClick={() => setEditingUser(user.id)}\n                          className=\"text-sm text-brand-primary hover:text-brand-primary/80\"\n                        >\n                          Bearbeiten\n                        </button>\n                      )}\n                    </>\n                  )}\n                </div>\n              </div>\n              <div className=\"mt-2 text-sm text-gray-500\">\n                {roleDescriptions[user.role]}\n              </div>\n            </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/components/SeriesApplicationModal.jsx","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":34,"fix":{"range":[33,33],"text":"\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { useState } from 'react';\nimport { useShifts } from '../contexts/useShifts';\nimport { SHIFT_STATUS } from '../utils/constants';\n\nexport default function SeriesApplicationModal({ isOpen, onClose, shifts = [] }) {\n  const { applyToSeries } = useShifts();\n  const [selectedShifts, setSelectedShifts] = useState([]);\n  const [userId] = useState('current-user'); // TODO: Get from auth context\n\n  const availableShifts = shifts.filter(shift => shift.status === SHIFT_STATUS.OPEN);\n\n  const handleShiftToggle = (shiftId) => {\n    setSelectedShifts(prev => \n      prev.includes(shiftId) \n        ? prev.filter(id => id !== shiftId)\n        : [...prev, shiftId]\n    );\n  };\n\n  const handleSubmit = () => {\n    if (selectedShifts.length > 0) {\n      applyToSeries(selectedShifts, userId);\n      onClose();\n      setSelectedShifts([]);\n    }\n  };\n\n  const selectAllSameType = (type) => {\n    const sameTypeShifts = availableShifts\n      .filter(shift => shift.type === type)\n      .map(shift => shift.id);\n    setSelectedShifts(prev => [...new Set([...prev, ...sameTypeShifts])]);\n  };\n\n  const selectAllWeekdays = () => {\n    const weekdayShifts = availableShifts\n      .filter(shift => {\n        const date = new Date(shift.date);\n        const day = date.getDay();\n        return day >= 1 && day <= 4; // Monday to Thursday\n      })\n      .map(shift => shift.id);\n    setSelectedShifts(prev => [...new Set([...prev, ...weekdayShifts])]);\n  };\n\n  const selectAllWeekends = () => {\n    const weekendShifts = availableShifts\n      .filter(shift => {\n        const date = new Date(shift.date);\n        const day = date.getDay();\n        return day === 0 || day === 5 || day === 6; // Friday, Saturday, Sunday\n      })\n      .map(shift => shift.id);\n    setSelectedShifts(prev => [...new Set([...prev, ...weekendShifts])]);\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50\">\n      <div className=\"relative top-20 mx-auto p-5 border w-11/12 md:w-3/4 lg:w-1/2 shadow-lg rounded-md bg-white\">\n        <div className=\"mt-3\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-lg font-medium text-gray-900\">\n              Serienbewerbung\n            </h3>\n            <button\n              onClick={onClose}\n              className=\"text-gray-400 hover:text-gray-600\"\n            >\n              <span className=\"sr-only\">Schließen</span>\n              ✕\n            </button>\n          </div>\n\n          <div className=\"mb-4\">\n            <p className=\"text-sm text-gray-600 mb-3\">\n              Bewerben Sie sich für mehrere Dienste gleichzeitig. Wählen Sie die gewünschten Dienste aus oder nutzen Sie die Schnellauswahl.\n            </p>\n            \n            <div className=\"flex flex-wrap gap-2 mb-4\">\n              <button\n                onClick={() => selectAllSameType('evening')}\n                className=\"px-3 py-1 text-xs bg-blue-100 text-blue-800 rounded-full hover:bg-blue-200\"\n              >\n                Alle Abend-Dienste\n              </button>\n              <button\n                onClick={() => selectAllSameType('night')}\n                className=\"px-3 py-1 text-xs bg-purple-100 text-purple-800 rounded-full hover:bg-purple-200\"\n              >\n                Alle Nacht-Dienste\n              </button>\n              <button\n                onClick={() => selectAllSameType('early')}\n                className=\"px-3 py-1 text-xs bg-green-100 text-green-800 rounded-full hover:bg-green-200\"\n              >\n                Alle Früh-Dienste\n              </button>\n              <button\n                onClick={selectAllWeekdays}\n                className=\"px-3 py-1 text-xs bg-gray-100 text-gray-800 rounded-full hover:bg-gray-200\"\n              >\n                Mo-Do\n              </button>\n              <button\n                onClick={selectAllWeekends}\n                className=\"px-3 py-1 text-xs bg-orange-100 text-orange-800 rounded-full hover:bg-orange-200\"\n              >\n                Fr-So\n              </button>\n            </div>\n          </div>\n\n          <div className=\"max-h-60 overflow-y-auto border border-gray-200 rounded-md\">\n            {availableShifts.length === 0 ? (\n              <p className=\"text-center text-gray-500 py-4\">Keine offenen Dienste verfügbar</p>\n            ) : (\n              <ul className=\"divide-y divide-gray-200\">\n                {availableShifts.map((shift) => (\n                  <li key={shift.id} className=\"p-3\">\n                    <label className=\"flex items-center\">\n                      <input\n                        type=\"checkbox\"\n                        checked={selectedShifts.includes(shift.id)}\n                        onChange={() => handleShiftToggle(shift.id)}\n                        className=\"rounded border-gray-300 text-brand-primary focus:ring-brand-primary\"\n                      />\n                      <div className=\"ml-3 flex-1\">\n                        <div className=\"text-sm font-medium text-gray-900\">\n                          {shift.date instanceof Date \n                            ? shift.date.toLocaleDateString('de-DE', { \n                                weekday: 'short', \n                                day: '2-digit', \n                                month: '2-digit' \n                              }) \n                            : shift.date}\n                        </div>\n                        <div className=\"text-sm text-gray-500\">\n                          {shift.type} • {shift.start}-{shift.end}\n                        </div>\n                      </div>\n                    </label>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </div>\n\n          <div className=\"mt-6 flex justify-between items-center\">\n            <p className=\"text-sm text-gray-600\">\n              {selectedShifts.length} Dienst{selectedShifts.length !== 1 ? 'e' : ''} ausgewählt\n            </p>\n            <div className=\"flex space-x-3\">\n              <button\n                onClick={onClose}\n                className=\"px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50\"\n              >\n                Abbrechen\n              </button>\n              <button\n                onClick={handleSubmit}\n                disabled={selectedShifts.length === 0}\n                className=\"px-4 py-2 text-sm font-medium text-white bg-brand-primary rounded-md hover:bg-brand-primary/80 disabled:bg-gray-300 disabled:cursor-not-allowed\"\n              >\n                Bewerben\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/components/ShiftTable.jsx","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":52,"fix":{"range":[51,51],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":48,"fix":{"range":[265,265],"text":"\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"import React, { useState, useContext } from 'react'\nimport { useShifts } from '../contexts/useShifts'\nimport AuthContext from '../contexts/AuthContext'\nimport { SHIFT_STATUS, WORK_LOCATIONS } from '../utils/constants'\nimport { canManageShifts } from '../utils/auth'\nimport _SeriesApplicationModal from './SeriesApplicationModal'\n\nexport default function ShiftTable({ shifts, showActions = true }) {\n  const { dispatch, applyToShift, assignShift } = useShifts();\n  const [showSeriesModal, setShowSeriesModal] = useState(false);\n  const auth = useContext(AuthContext)\n  const userRole = auth?.user?.role || 'analyst'\n\n  const getStatusBadgeClass = (status) => {\n    switch (status) {\n      case SHIFT_STATUS.OPEN:\n        return 'bg-blue-100 text-blue-800';\n      case SHIFT_STATUS.ASSIGNED:\n        return 'bg-green-100 text-green-800';\n      case SHIFT_STATUS.CANCELLED:\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const handleApply = (shiftId) => {\n    if(!auth?.user) return; // must be logged in\n    applyToShift(shiftId, auth.user.name || auth.user.role);\n  };\n\n  const handleAssign = (shiftId) => {\n    if(!auth?.user) return\n    assignShift(shiftId, auth.user.name || auth.user.role)\n  };\n\n  const handleCancel = (shiftId) => {\n    dispatch({\n      type: 'UPDATE_SHIFT',\n      payload: {\n        ...shifts.find(s => s.id === shiftId),\n        status: SHIFT_STATUS.CANCELLED\n      }\n    });\n  };\n\n  return (\n    <div className=\"bg-white shadow overflow-hidden sm:rounded-md\">\n      <ul className=\"divide-y divide-gray-200\">\n        {shifts.map((shift) => (\n          <li key={shift.id}>\n            <div className=\"px-4 py-4 sm:px-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"text-sm font-medium text-brand-primary truncate\">\n                  {shift.date instanceof Date \n                    ? shift.date.toLocaleDateString('de-DE', { \n                        weekday: 'short', \n                        day: '2-digit', \n                        month: '2-digit' \n                      }) \n                    : shift.date} • {shift.start}-{shift.end}\n                </div>\n                <div className=\"ml-2 flex-shrink-0 flex\">\n                  <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${getStatusBadgeClass(shift.status)}`}>\n                    {shift.status}\n                  </span>\n                  {shift.workLocation === WORK_LOCATIONS.HOME && (\n                    <span className=\"ml-2 px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-gray-100 text-gray-800\">\n                      Homeoffice\n                    </span>\n                  )}\n                </div>\n              </div>\n              \n              <div className=\"mt-2 sm:flex sm:justify-between\">\n                <div className=\"sm:flex\">\n                  {shift.assignedTo && (\n                    <div className=\"text-sm text-gray-500\">\n                      Zugewiesen an: {shift.assignedTo}\n                    </div>\n                  )}\n                </div>\n                {showActions && (\n                  <div className=\"mt-2 flex items-center text-sm text-gray-500 sm:mt-0 space-x-2\">\n                    {shift.status === SHIFT_STATUS.OPEN && (\n                      <>\n                        <button\n                          onClick={() => handleApply(shift.id)}\n                          className=\"inline-flex items-center rounded-md bg-brand-primary px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-brand-primary/80\"\n                        >\n                          Bewerben\n                        </button>\n                        {canManageShifts(userRole) && (\n                          <button\n                            onClick={() => handleAssign(shift.id)}\n                            className=\"inline-flex items-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50\"\n                          >\n                            Zuweisen\n                          </button>\n                        )}\n                      </>\n                    )}\n                    {shift.status === SHIFT_STATUS.ASSIGNED && canManageShifts(userRole) && (\n                      <button\n                        onClick={() => handleCancel(shift.id)}\n                        className=\"inline-flex items-center rounded-md bg-red-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-red-500\"\n                      >\n                        Absagen\n                      </button>\n                    )}\n                  </div>\n                )}\n              </div>\n              \n              {shift.conflicts?.length > 0 && (\n                <div className=\"mt-2 text-sm text-red-600\">\n                  Konflikte gefunden: {shift.conflicts.join(', ')}\n                </div>\n              )}\n            </div>\n          </li>\n        ))}\n      </ul>\n      \n      {/* Series Application Button */}\n      {showActions && shifts.filter(s => s.status === SHIFT_STATUS.OPEN).length > 1 && (\n        <div className=\"px-4 py-3 bg-gray-50 border-t border-gray-200\">\n          <button\n            onClick={() => setShowSeriesModal(true)}\n            className=\"inline-flex items-center rounded-md bg-brand-secondary px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-brand-secondary/80\"\n          >\n            Serienbewerbung ({shifts.filter(s => s.status === SHIFT_STATUS.OPEN).length} Dienste)\n          </button>\n        </div>\n      )}\n      \n      {/* Series Application Modal */}\n  <_SeriesApplicationModal\n        isOpen={showSeriesModal}\n        onClose={() => setShowSeriesModal(false)}\n        shifts={shifts}\n      />\n    </div>\n  );\n}\n\nexport function ShiftTableComponent(props){\n  return ShiftTable(props)\n}\nexport { ShiftTable as ShiftTableDefault }\n","usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/components/ShiftTemplateManager.jsx","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":33,"fix":{"range":[32,32],"text":"\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { useState } from 'react'\nimport { useShiftTemplates } from '../contexts/useShiftTemplates'\n\nfunction ShiftTemplateManager() {\n  const { templates, addTemplate, updateTemplate, deleteTemplate } = useShiftTemplates()\n  const [editingTemplate, setEditingTemplate] = useState(null)\n  const [formState, setFormState] = useState({\n    name: '',\n    startTime: '',\n    endTime: '',\n    days: [],\n  })\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target\n    setFormState({ ...formState, [name]: value })\n  }\n\n  const handleDayChange = (day) => {\n    const newDays = formState.days.includes(day)\n      ? formState.days.filter((d) => d !== day)\n      : [...formState.days, day]\n    setFormState({ ...formState, days: newDays })\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    if (editingTemplate) {\n      updateTemplate({ ...formState, id: editingTemplate.id })\n    } else {\n      addTemplate(formState)\n    }\n    resetForm()\n  }\n\n  const handleEdit = (template) => {\n    setEditingTemplate(template)\n    setFormState(template)\n  }\n\n  const resetForm = () => {\n    setEditingTemplate(null)\n    setFormState({ name: '', startTime: '', endTime: '', days: [] })\n  }\n\n  const daysOfWeek = ['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su']\n\n  return (\n    <div className=\"p-4 bg-white shadow-md rounded-lg\">\n      <h2 className=\"text-xl font-bold mb-4\">Shift Templates</h2>\n      <form onSubmit={handleSubmit} className=\"mb-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={formState.name}\n            onChange={handleInputChange}\n            placeholder=\"Template Name\"\n            className=\"p-2 border rounded\"\n            required\n          />\n          <input\n            type=\"time\"\n            name=\"startTime\"\n            value={formState.startTime}\n            onChange={handleInputChange}\n            className=\"p-2 border rounded\"\n            required\n          />\n          <input\n            type=\"time\"\n            name=\"endTime\"\n            value={formState.endTime}\n            onChange={handleInputChange}\n            className=\"p-2 border rounded\"\n            required\n          />\n        </div>\n        <div className=\"mt-4\">\n          <label className=\"block mb-2\">Days of the week:</label>\n          <div className=\"flex space-x-2\">\n            {daysOfWeek.map((day) => (\n              <button\n                type=\"button\"\n                key={day}\n                onClick={() => handleDayChange(day)}\n                className={`px-4 py-2 rounded ${\n                  formState.days.includes(day)\n                    ? 'bg-blue-500 text-white'\n                    : 'bg-gray-200'\n                }`}\n              >\n                {day}\n              </button>\n            ))}\n          </div>\n        </div>\n        <div className=\"mt-4\">\n          <button type=\"submit\" className=\"bg-green-500 text-white px-4 py-2 rounded\">\n            {editingTemplate ? 'Update Template' : 'Add Template'}\n          </button>\n          {editingTemplate && (\n            <button\n              type=\"button\"\n              onClick={resetForm}\n              className=\"bg-gray-500 text-white px-4 py-2 rounded ml-2\"\n            >\n              Cancel\n            </button>\n          )}\n        </div>\n      </form>\n      <div>\n        <h3 className=\"text-lg font-bold mb-2\">Existing Templates</h3>\n        <ul>\n          {templates.map((template) => (\n            <li key={template.id} className=\"flex justify-between items-center p-2 border-b\">\n              <div>\n                <p className=\"font-semibold\">{template.name}</p>\n                <p>{template.days.join(', ')}: {template.startTime} - {template.endTime}</p>\n              </div>\n              <div>\n                <button onClick={() => handleEdit(template)} className=\"bg-yellow-500 text-white px-2 py-1 rounded mr-2\">\n                  Edit\n                </button>\n                <button onClick={() => deleteTemplate(template.id)} className=\"bg-red-500 text-white px-2 py-1 rounded\">\n                  Delete\n                </button>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  )\n}\n\nexport default ShiftTemplateManager\n","usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/components/ThemeToggle.jsx","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":48,"fix":{"range":[47,47],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"`@heroicons/react/24/outline` import should occur before import of `../contexts/useTheme`","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":64,"fix":{"range":[0,112],"text":"import { SunIcon, MoonIcon } from '@heroicons/react/24/outline'\nimport { useTheme } from '../contexts/useTheme'\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"import { useTheme } from '../contexts/useTheme'\nimport { SunIcon, MoonIcon } from '@heroicons/react/24/outline'\n\nexport default function ThemeToggle() {\n  const { state, dispatch } = useTheme();\n\n  return (\n    <button\n      type=\"button\"\n      onClick={() => dispatch({ type: 'TOGGLE_THEME' })}\n      className=\"rounded-full p-1 text-gray-400 hover:text-gray-600\"\n    >\n      <span className=\"sr-only\">Toggle theme</span>\n      {state.isDark ? (\n  <SunIcon data-testid=\"sun-icon\" className=\"h-6 w-6\" aria-hidden=\"true\" />\n      ) : (\n  <MoonIcon data-testid=\"moon-icon\" className=\"h-6 w-6\" aria-hidden=\"true\" />\n      )}\n    </button>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/contexts/AuthContext.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/contexts/ShiftContext.jsx","messages":[],"suppressedMessages":[{"ruleId":"import/order","severity":1,"message":"There should be no empty line within import group","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":57,"fix":{"range":[351,352],"text":""},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":50,"fix":{"range":[401,401],"text":"\n"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'disableAsyncBootstrap' and 'state.applications'. Either include them or remove the dependency array.","line":78,"column":6,"nodeType":"ArrayExpression","endLine":78,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [disableAsyncBootstrap, state.applications]","fix":{"range":[3469,3471],"text":"[disableAsyncBootstrap, state.applications]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/contexts/ShiftContextCore.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/contexts/ShiftTemplateContext.jsx","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":53,"fix":{"range":[52,52],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":66,"fix":{"range":[118,118],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"`uuid` import should occur before import of `./ShiftTemplateContextCore`","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":36,"fix":{"range":[53,155],"text":"import { v4 as uuidv4 } from 'uuid'\nimport { ShiftTemplateContext } from './ShiftTemplateContextCore'\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"import { useState, useEffect, useMemo } from 'react'\nimport { ShiftTemplateContext } from './ShiftTemplateContextCore'\nimport { v4 as uuidv4 } from 'uuid'\n\n\nfunction ShiftTemplateProviderImpl({ children }) {\n  const [templates, setTemplates] = useState(() => {\n    try {\n      const savedTemplates = localStorage.getItem('shiftTemplates')\n      return savedTemplates ? JSON.parse(savedTemplates) : []\n    } catch {\n      return []\n    }\n  })\n\n  useEffect(() => {\n    try {\n      localStorage.setItem('shiftTemplates', JSON.stringify(templates))\n    } catch {/* ignore quota errors */}\n  }, [templates])\n\n  const addTemplate = (template) => {\n    const newTemplate = { ...template, id: uuidv4() }\n    setTemplates((prev) => [...prev, newTemplate])\n  }\n\n  const updateTemplate = (updatedTemplate) => {\n    setTemplates((prev) => prev.map((t) => (t.id === updatedTemplate.id ? updatedTemplate : t)))\n  }\n\n  const deleteTemplate = (id) => {\n    setTemplates((prev) => prev.filter((t) => t.id !== id))\n  }\n\n  const value = useMemo(() => ({ templates, addTemplate, updateTemplate, deleteTemplate }), [templates])\n\n  return <ShiftTemplateContext.Provider value={value}>{children}</ShiftTemplateContext.Provider>\n}\n\nexport function ShiftTemplateProvider(props) {\n  return <ShiftTemplateProviderImpl {...props} />\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/contexts/ShiftTemplateContextCore.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/contexts/ThemeContext.jsx","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":47,"fix":{"range":[46,46],"text":"\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { useReducer, useEffect } from 'react';\nimport { ThemeContext } from './ThemeContextCore';\n\nconst initialState = {\n  isDark: false,\n  colors: {\n    primary: '#222F88',\n    accent: '#27ADE7',\n    background: '#f6f7fb',\n    surface: '#ffffff',\n    text: '#0f172a'\n  }\n};\n\nfunction themeReducer(state, action) {\n  switch (action.type) {\n    case 'TOGGLE_THEME':\n      return {\n        ...state,\n        isDark: !state.isDark,\n        colors: state.isDark ? {\n          primary: '#222F88',\n          accent: '#27ADE7',\n          background: '#f6f7fb',\n          surface: '#ffffff',\n          text: '#0f172a'\n        } : {\n          primary: '#222F88',\n          accent: '#27ADE7',\n          background: '#060918',\n          surface: '#0b1022',\n          text: '#e5e7eb'\n        }\n      };\n    default:\n      return state;\n  }\n}\n\nexport function ThemeProvider({ children }) {\n  const [state, dispatch] = useReducer(themeReducer, initialState);\n\n  // Apply theme to document\n  useEffect(() => {\n    document.documentElement.dataset.theme = state.isDark ? 'dark' : 'light';\n  }, [state.isDark]);\n\n  return (\n    <ThemeContext.Provider value={{ state, dispatch }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/contexts/ThemeContextCore.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/contexts/useAuth.js","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":35,"fix":{"range":[34,34],"text":"\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { useContext } from 'react'\nimport AuthContext from './AuthContext'\n\nexport function useAuth() {\n  return useContext(AuthContext)\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/contexts/useShiftTemplates.js","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":44,"fix":{"range":[43,43],"text":"\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { useContext, useMemo } from 'react'\nimport { ShiftTemplateContext } from './ShiftTemplateContextCore'\n\n// Returns the real template context if mounted, otherwise a safe no-op fallback.\n// This lets tests that only mount ShiftProvider (and not ShiftTemplateProvider) still pass.\nexport function useShiftTemplates() {\n  const ctx = useContext(ShiftTemplateContext)\n  return useMemo(() => ctx || ({\n    templates: [],\n    addTemplate: () => {},\n    updateTemplate: () => {},\n    deleteTemplate: () => {},\n  }), [ctx])\n}\n\nexport default useShiftTemplates","usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/contexts/useShifts.js","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":35,"fix":{"range":[34,34],"text":"\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { useContext } from 'react'\nimport { ShiftContext } from './ShiftContext'\n\nexport function useShifts() {\n  const ctx = useContext(ShiftContext)\n  if (!ctx) throw new Error('useShifts must be used within ShiftProvider')\n  return ctx\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/contexts/useTheme.js","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":35,"fix":{"range":[34,34],"text":"\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { useContext } from 'react'\nimport { ThemeContext } from './ThemeContextCore'\n\nexport function useTheme() {\n  const context = useContext(ThemeContext)\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider')\n  }\n  return context\n}\n\nexport default useTheme\n","usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/main.jsx","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":46,"fix":{"range":[80,80],"text":"\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { StrictMode } from 'react'\nimport { createRoot } from 'react-dom/client'\nimport './index.css'\nimport App from './App.jsx'\nimport { AuthProvider } from './contexts/AuthContext.jsx'\n\ncreateRoot(document.getElementById('root')).render(\n  <StrictMode>\n    <AuthProvider>\n      <App />\n    </AuthProvider>\n  </StrictMode>,\n)\n\n// Register service worker (PWA) in production\nif ('serviceWorker' in navigator && import.meta.env.PROD) {\n  navigator.serviceWorker.register('/sw.js').catch(() => {})\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/pages/Administration.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/pages/Audit.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/pages/Calendar.jsx","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":54,"fix":{"range":[53,53],"text":"\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { useState, useMemo, useContext } from 'react'\nimport { useShifts } from '../contexts/useShifts'\nimport { canManageShifts } from '../utils/auth'\nimport AuthContext from '../contexts/AuthContext'\nimport _ShiftTable from '../components/ShiftTable'\n\nconst DAYS = ['Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 'Freitag', 'Samstag', 'Sonntag']\nconst HOURS = Array.from({ length: 24 }, (_, i) => `${String(i).padStart(2, '0')}:00`)\nconst DAY_MINUTES = 24 * 60\nconst PX_PER_HOUR = 48 // calendar row height baseline\nconst DAY_HEIGHT = 24 * PX_PER_HOUR\n\nfunction buildDate(dateLike) {\n  return dateLike instanceof Date ? new Date(dateLike) : new Date(dateLike)\n}\n\nfunction combine(dateLike, timeStr) {\n  const d = buildDate(dateLike)\n  if (!timeStr) return d\n  const [h, m] = timeStr.split(':').map(Number)\n  d.setHours(h, m || 0, 0, 0)\n  return d\n}\n\nfunction getShiftSpanForDay(shift, dayDate) {\n  // Returns pixel offset & height (in px) within a single day column\n  const startDate = combine(shift.date, shift.start)\n  let endDate = combine(shift.date, shift.end)\n  if (endDate <= startDate) {\n    // overnight shift crosses midnight\n    endDate.setDate(endDate.getDate() + 1)\n  }\n  const dayStart = new Date(dayDate)\n  dayStart.setHours(0,0,0,0)\n  const dayEnd = new Date(dayStart)\n  dayEnd.setDate(dayEnd.getDate() + 1)\n\n  // overlap check\n  if (startDate >= dayEnd || endDate <= dayStart) return null\n\n  const visibleStart = startDate < dayStart ? dayStart : startDate\n  const visibleEnd = endDate > dayEnd ? dayEnd : endDate\n  const minutesFromDayStart = (visibleStart - dayStart) / 60000\n  const visibleMinutes = (visibleEnd - visibleStart) / 60000\n  const top = (minutesFromDayStart / DAY_MINUTES) * DAY_HEIGHT\n  const height = Math.max(visibleMinutes / DAY_MINUTES * DAY_HEIGHT, 12) // minimum height\n  return { top, height }\n}\n\nexport default function Calendar() {\n  const { state } = useShifts();\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  // future: month view support\n  const auth = useContext(AuthContext)\n  const userRole = auth?.user?.role || 'analyst'\n\n  const { weekShifts, weekStart } = useMemo(() => {\n    const start = new Date(selectedDate)\n    start.setHours(0,0,0,0)\n    // Monday baseline\n    const day = start.getDay()\n    const diffToMonday = (day === 0 ? -6 : 1 - day)\n    start.setDate(start.getDate() + diffToMonday)\n    const end = new Date(start)\n    end.setDate(end.getDate() + 7)\n    const filtered = state.shifts.filter(s => {\n      // consider shifts overlapping week (including overnight spill)\n      const baseDate = buildDate(s.date)\n      const startDateTime = combine(baseDate, s.start)\n      let endDateTime = combine(baseDate, s.end)\n      if (endDateTime <= startDateTime) endDateTime.setDate(endDateTime.getDate() + 1)\n      return startDateTime < end && endDateTime >= start\n    })\n    return { weekShifts: filtered, weekStart: start }\n  }, [state.shifts, selectedDate])\n\n  const navigateWeek = (direction) => {\n    const newDate = new Date(selectedDate);\n    newDate.setDate(newDate.getDate() + (direction * 7));\n    setSelectedDate(newDate);\n  };\n\n  const handleShiftClick = (shift) => {\n    // TODO: Open shift details modal\n    console.log('Shift clicked:', shift);\n  };\n\n  const handleCreateShift = () => {\n    if (canManageShifts(userRole)) {\n      // TODO: Open create shift modal\n      console.log('Creating new shift');\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"md:flex md:items-center md:justify-between mb-8\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Kalender</h1>\n          <p className=\"mt-1 text-sm text-gray-500\">\n            Wochenübersicht der Dienste\n          </p>\n        </div>\n        <div className=\"mt-4 flex space-x-3 md:ml-4 md:mt-0\">\n          <button\n            type=\"button\"\n            onClick={() => navigateWeek(-1)}\n            className=\"inline-flex items-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50\"\n          >\n            Vorherige Woche\n          </button>\n          <button\n            type=\"button\"\n            onClick={() => setSelectedDate(new Date())}\n            className=\"inline-flex items-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50\"\n          >\n            Heute\n          </button>\n          <button\n            type=\"button\"\n            onClick={() => navigateWeek(1)}\n            className=\"inline-flex items-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50\"\n          >\n            Nächste Woche\n          </button>\n          {canManageShifts(userRole) && (\n            <button\n              type=\"button\"\n              onClick={handleCreateShift}\n              className=\"inline-flex items-center rounded-md bg-brand-primary px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-brand-primary/80\"\n            >\n              Dienst erstellen\n            </button>\n          )}\n        </div>\n      </div>\n\n      <div className=\"bg-white shadow rounded-lg overflow-x-auto\">\n        <div className=\"min-w-[960px]\">\n          {/* Header */}\n          <div className=\"grid grid-cols-8 bg-gray-100 border-b border-gray-200\">\n            <div className=\"p-2 text-xs font-medium text-gray-500\">Zeit</div>\n            {DAYS.map((label, idx) => {\n              const d = new Date(weekStart)\n              d.setDate(weekStart.getDate() + idx)\n              return (\n                <div key={label} className=\"p-2 text-center text-xs font-medium text-gray-600\">\n                  <div>{label}</div>\n                  <div className=\"text-[10px] text-gray-400\">{d.toLocaleDateString('de-DE', { day: '2-digit', month: '2-digit' })}</div>\n                </div>\n              )\n            })}\n          </div>\n          <div className=\"grid grid-cols-8\">\n            {/* Time column */}\n            <div className=\"relative border-r border-gray-200\" style={{ height: DAY_HEIGHT }}>\n              {HOURS.map((h, i) => (\n                <div key={h} className=\"absolute left-0 w-full flex items-start\" style={{ top: i * PX_PER_HOUR }}>\n                  <div className=\"text-[10px] text-gray-400 pl-1 -mt-2\">{h}</div>\n                  <div className=\"w-full h-px bg-gray-100 translate-y-4\" />\n                </div>\n              ))}\n            </div>\n            {/* Day columns */}\n            {DAYS.map((_, dayIdx) => {\n              const dayDate = new Date(weekStart)\n              dayDate.setDate(weekStart.getDate() + dayIdx)\n              const dayStart = new Date(dayDate)\n              dayStart.setHours(0,0,0,0)\n              const dayEnd = new Date(dayStart)\n              dayEnd.setDate(dayEnd.getDate() + 1)\n              const dayShifts = weekShifts.filter(shift => {\n                const base = buildDate(shift.date)\n                const s = combine(base, shift.start)\n                let e = combine(base, shift.end)\n                if (e <= s) e.setDate(e.getDate() + 1)\n                return s < dayEnd && e > dayStart\n              })\n              return (\n                <div key={dayIdx} className=\"relative border-r border-gray-100\" style={{ height: DAY_HEIGHT }}>\n                  {/* Hour grid lines */}\n                  {HOURS.map((_, i) => (\n                    <div key={i} className=\"absolute left-0 w-full h-px bg-gray-100\" style={{ top: i * PX_PER_HOUR }} />\n                  ))}\n                  {dayShifts.map(shift => {\n                    const span = getShiftSpanForDay(shift, dayDate)\n                    if (!span) return null\n                    return (\n                      <div\n                        key={`${shift.id}_${dayIdx}`}\n                        className=\"absolute mx-1 rounded-md bg-brand-primary/90 text-white text-[10px] px-1 py-0.5 cursor-pointer shadow-sm hover:bg-brand-primary\"\n                        style={{ top: span.top, height: span.height }}\n                        onClick={() => handleShiftClick(shift)}\n                        title={`${shift.type || shift.name} ${shift.start}-${shift.end}`}\n                      >\n                        <div className=\"font-semibold truncate\">{shift.type || shift.name}</div>\n                        <div className=\"truncate\">{shift.assignedTo || 'Offen'}</div>\n                      </div>\n                    )\n                  })}\n                </div>\n              )\n            })}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"mt-8\">\n        <h2 className=\"text-lg font-semibold mb-4\">Diese Woche</h2>\n        <_ShiftTable shifts={weekShifts} />\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/pages/Dashboard.jsx","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":33,"fix":{"range":[32,32],"text":"\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { useState } from 'react'\nimport { useShifts } from '../contexts/useShifts'\nimport { ROLES } from '../utils/constants'\nimport { canManageShifts } from '../utils/auth'\nimport MiniAnalytics from '../components/MiniAnalytics'\nimport ShiftTable from '../components/ShiftTable'\nimport NotificationMenu from '../components/NotificationMenu'\nimport ThemeToggle from '../components/ThemeToggle'\nimport ConnectionStatus from '../components/ConnectionStatus'\n\nfunction QuickFilters({ onChange }) {\n  const filters = [\n    { id: 'today', name: 'Heute' },\n    { id: '7days', name: '7 Tage' },\n    { id: 'open', name: 'Offen' },\n    { id: 'assigned', name: 'Zugewiesen' },\n    { id: 'cancelled', name: 'Abgesagt' },\n  ];\n\n  return (\n    <div className=\"flex space-x-2\">\n      {filters.map((filter) => (\n        <button\n          key={filter.id}\n          onClick={() => onChange(filter.id)}\n          className=\"inline-flex items-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50\"\n        >\n          {filter.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default function Dashboard() {\n  const { state } = useShifts();\n  const [filter, setFilter] = useState('today');\n  const userRole = ROLES.ADMIN; // TODO: Get from auth context\n\n  const filteredShifts = state.shifts.filter(shift => {\n    const shiftDate = new Date(shift.date);\n    const today = new Date();\n    \n    switch (filter) {\n      case 'today':\n        return shiftDate.toDateString() === today.toDateString();\n      case '7days': {\n        const sevenDaysFromNow = new Date(today.setDate(today.getDate() + 7));\n        return shiftDate <= sevenDaysFromNow;\n      }\n      case 'open':\n        return shift.status === 'open';\n      case 'assigned':\n        return shift.status === 'assigned';\n      case 'cancelled':\n        return shift.status === 'cancelled';\n      default:\n        return true;\n    }\n  });\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      {/* Connection Status - NEW: Shows SharePoint/localStorage mode */}\n      <div className=\"mb-6\">\n        <ConnectionStatus />\n      </div>\n\n      <div className=\"md:flex md:items-center md:justify-between mb-8\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Dashboard</h1>\n          <p className=\"mt-1 text-sm text-gray-500\">\n            Überblick über alle Dienste und Aktivitäten\n          </p>\n        </div>\n        <div className=\"mt-4 flex items-center space-x-3 md:ml-4 md:mt-0\">\n          <NotificationMenu />\n          <ThemeToggle />\n          {canManageShifts(userRole) && (\n            <button\n              type=\"button\"\n              onClick={() => alert('Easter Egg: Automatische Zuteilung... Nein, das machen wir doch lieber manuell! 😉')}\n              className=\"inline-flex items-center rounded-md bg-brand-primary px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-brand-primary/80\"\n            >\n              Automatisch zuteilen\n            </button>\n          )}\n        </div>\n      </div>\n\n      <div className=\"mb-8\">\n        <MiniAnalytics />\n      </div>\n\n      <div className=\"mb-4\">\n        <QuickFilters onChange={setFilter} />\n      </div>\n\n      <div className=\"mb-8\">\n        <h2 className=\"text-lg font-semibold mb-4\">Aktuelle Dienste</h2>\n        <ShiftTable shifts={filteredShifts} />\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/pages/TestPage.jsx","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":34,"fix":{"range":[33,33],"text":"\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { useState } from 'react';\n// useShifts is defined in its own hook file, not exported from ShiftContext.jsx\nimport { useShifts } from '../contexts/useShifts';\nimport { sharePointService } from '../services/sharePointService';\n\nexport default function TestPage() {\n  const { state } = useShifts();\n  // Local helpers since ShiftContext doesn't expose these directly yet\n  const testConnection = async () => sharePointService.isSharePointAvailable();\n  const createShift = async (shift) => sharePointService.createShift(shift);\n  const [testResults, setTestResults] = useState([]);\n  const [testing, setTesting] = useState(false);\n\n  const addTestResult = (test, result, details = '') => {\n    setTestResults(prev => [...prev, {\n      test,\n      result,\n      details,\n      timestamp: new Date()\n    }]);\n  };\n\n  const runAllTests = async () => {\n    setTesting(true);\n    setTestResults([]);\n\n    // Test 1: SharePoint availability\n    try {\n      const isOnline = await sharePointService.isSharePointAvailable();\n      addTestResult(\n        'SharePoint Verfügbarkeit',\n        isOnline ? 'PASS' : 'FAIL',\n        isOnline ? 'SharePoint ist erreichbar' : 'SharePoint nicht verfügbar - localStorage wird verwendet'\n      );\n    } catch (error) {\n      addTestResult('SharePoint Verfügbarkeit', 'ERROR', error.message);\n    }\n\n    // Test 2: Data loading\n    try {\n      const shifts = await sharePointService.getShifts();\n      addTestResult(\n        'Daten laden',\n        'PASS',\n        `${shifts.length} Schichten geladen (${state.dataSource})`\n      );\n    } catch (error) {\n      addTestResult('Daten laden', 'ERROR', error.message);\n    }\n\n    // Test 3: Create test shift\n    try {\n      const testShift = {\n        date: new Date(),\n        start: '09:00',\n        end: '17:00',\n        type: 'test',\n        status: 'open',\n        workLocation: 'office'\n      };\n      \n      const newShift = await createShift(testShift);\n      addTestResult(\n        'Schicht erstellen',\n        'PASS',\n        `Test-Schicht erstellt (ID: ${newShift.id})`\n      );\n    } catch (error) {\n      addTestResult('Schicht erstellen', 'ERROR', error.message);\n    }\n\n    // Test 4: Audit logging\n    try {\n      await sharePointService.logAudit('TEST_AUDIT', { test: true });\n      addTestResult(\n        'Audit Protokoll',\n        'PASS',\n        'Test-Eintrag im Audit-Log erstellt'\n      );\n    } catch (_error) {\n      addTestResult('Audit Protokoll', 'INFO', 'Läuft im localStorage-Modus');\n    }\n\n    setTesting(false);\n  };\n\n  const exportData = () => {\n    const data = {\n      state,\n      testResults,\n      timestamp: new Date(),\n      browser: navigator.userAgent,\n      url: window.location.href\n    };\n\n    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    \n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `swaxi-test-results-${new Date().toISOString().split('T')[0]}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        <h1 className=\"text-3xl font-bold mb-8\">Hybrid-Modus Testen</h1>\n        \n        {/* Current Status */}\n        <div className=\"bg-white p-6 rounded-lg shadow-sm border mb-8\">\n          <h2 className=\"text-xl font-semibold mb-4\">Aktueller Status</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"bg-gray-50 p-4 rounded\">\n              <div className=\"text-sm text-gray-600\">Datenquelle</div>\n              <div className=\"text-lg font-semibold\">\n                {state.dataSource === 'sharePoint' ? '🟢 SharePoint' : '🟡 localStorage'}\n              </div>\n            </div>\n            <div className=\"bg-gray-50 p-4 rounded\">\n              <div className=\"text-sm text-gray-600\">Online Status</div>\n              <div className=\"text-lg font-semibold\">\n                {state.isOnline ? '✅ Online' : '⚠️ Offline'}\n              </div>\n            </div>\n            <div className=\"bg-gray-50 p-4 rounded\">\n              <div className=\"text-sm text-gray-600\">Schichten</div>\n              <div className=\"text-lg font-semibold\">\n                {state.shifts.length} geladen\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Test Controls */}\n        <div className=\"bg-white p-6 rounded-lg shadow-sm border mb-8\">\n          <h2 className=\"text-xl font-semibold mb-4\">Tests ausführen</h2>\n          <div className=\"flex space-x-4\">\n            <button\n              onClick={runAllTests}\n              disabled={testing}\n              className=\"btn-primary\"\n            >\n              {testing ? '🔄 Tests laufen...' : '🚀 Alle Tests starten'}\n            </button>\n            \n            <button\n              onClick={testConnection}\n              className=\"btn-secondary\"\n            >\n              🔗 Verbindung testen\n            </button>\n\n            <button\n              onClick={exportData}\n              className=\"btn-secondary\"\n            >\n              💾 Ergebnisse exportieren\n            </button>\n          </div>\n        </div>\n\n        {/* Test Results */}\n        {testResults.length > 0 && (\n          <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\n            <h2 className=\"text-xl font-semibold mb-4\">Test-Ergebnisse</h2>\n            <div className=\"space-y-3\">\n              {testResults.map((result, index) => (\n                <div \n                  key={index}\n                  className={`p-4 rounded border-l-4 ${\n                    result.result === 'PASS' ? 'border-green-500 bg-green-50' :\n                    result.result === 'FAIL' ? 'border-red-500 bg-red-50' :\n                    result.result === 'ERROR' ? 'border-red-500 bg-red-50' :\n                    'border-blue-500 bg-blue-50'\n                  }`}\n                >\n                  <div className=\"flex justify-between items-start\">\n                    <div>\n                      <div className=\"font-semibold\">{result.test}</div>\n                      <div className=\"text-sm text-gray-600 mt-1\">\n                        {result.details}\n                      </div>\n                    </div>\n                    <div className={`px-2 py-1 rounded text-xs font-semibold ${\n                      result.result === 'PASS' ? 'bg-green-100 text-green-800' :\n                      result.result === 'FAIL' ? 'bg-red-100 text-red-800' :\n                      result.result === 'ERROR' ? 'bg-red-100 text-red-800' :\n                      'bg-blue-100 text-blue-800'\n                    }`}>\n                      {result.result}\n                    </div>\n                  </div>\n                  <div className=\"text-xs text-gray-400 mt-2\">\n                    {result.timestamp.toLocaleString('de-DE')}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Instructions */}\n        <div className=\"mt-8 bg-blue-50 p-6 rounded-lg\">\n          <h3 className=\"text-lg font-semibold text-blue-900 mb-3\">\n            💡 Wie funktioniert der Hybrid-Modus?\n          </h3>\n          <ul className=\"space-y-2 text-blue-800\">\n            <li>• <strong>Lokal:</strong> Läuft mit localStorage (wie bisher)</li>\n            <li>• <strong>Stadtwerke Netzwerk:</strong> Erkennt automatisch SharePoint</li>\n            <li>• <strong>Fallback:</strong> Wechselt nahtlos zwischen beiden Modi</li>\n            <li>• <strong>Synchronisation:</strong> Daten werden automatisch gesichert</li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/repository/InMemoryShiftRepository.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/repository/IndexedDBShiftRepository.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/repository/SharePointShiftRepository.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/repository/ShiftRepository.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/repository/repositoryFactory.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/services/firebaseConfig.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/services/migrationService.js","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":39,"fix":{"range":[74,74],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"`firebase/firestore` import should occur before import of `./firebaseConfig`","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":75,"fix":{"range":[36,150],"text":"import { collection, writeBatch, doc, getDocs } from 'firebase/firestore';\nimport { db } from './firebaseConfig';\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"// src/services/migrationService.js\nimport { db } from './firebaseConfig';\nimport { collection, writeBatch, doc, getDocs } from 'firebase/firestore';\n\nexport class MigrationService {\n  async exportLocalStorageData() {\n    const data = {\n      shifts: JSON.parse(localStorage.getItem('swaxi-dispo-state') || '{\"shifts\": []}'),\n      auth: JSON.parse(localStorage.getItem('swaxi-auth') || '{}'),\n      timestamp: new Date().toISOString(),\n      version: '5.3'\n    };\n\n    // Create downloadable JSON file\n    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    \n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `swaxi-export-${new Date().toISOString().split('T')[0]}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n\n    return data;\n  }\n\n  async importToFirebase(jsonData) {\n    const batch = writeBatch(db);\n    let processedCount = 0;\n\n    try {\n      // Import shifts\n      if (jsonData.shifts && Array.isArray(jsonData.shifts)) {\n        jsonData.shifts.forEach((shift) => {\n          const shiftRef = doc(collection(db, 'shifts'));\n          batch.set(shiftRef, {\n            ...shift,\n            id: shiftRef.id,\n            createdAt: new Date(),\n            updatedAt: new Date(),\n            migratedFrom: 'localStorage'\n          });\n          processedCount++;\n        });\n      }\n\n      // Commit in batches of 500 (Firestore limit)\n      await batch.commit();\n      \n      console.log(`✅ Successfully migrated ${processedCount} records to Firebase`);\n      return { success: true, count: processedCount };\n    } catch (error) {\n      console.error('❌ Migration failed:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  async validateMigration() {\n    try {\n      const shiftsSnapshot = await getDocs(collection(db, 'shifts'));\n      const firebaseShiftCount = shiftsSnapshot.size;\n      \n      const localStorageData = JSON.parse(localStorage.getItem('swaxi-dispo-state') || '{\"shifts\": []}');\n      const localShiftCount = localStorageData.shifts?.length || 0;\n\n      const validation = {\n        firebase: firebaseShiftCount,\n        localStorage: localShiftCount,\n        match: firebaseShiftCount === localShiftCount,\n        difference: Math.abs(firebaseShiftCount - localShiftCount)\n      };\n\n      console.log('Migration validation:', validation);\n      return validation;\n    } catch (error) {\n      console.error('Validation error:', error);\n      return { error: error.message };\n    }\n  }\n\n  async createBackup() {\n    try {\n      const collections = ['shifts', 'users', 'applications', 'notifications'];\n      const backup = {\n        timestamp: new Date().toISOString(),\n        data: {}\n      };\n\n      for (const collectionName of collections) {\n        const snapshot = await getDocs(collection(db, collectionName));\n        backup.data[collectionName] = snapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n      }\n\n      const blob = new Blob([JSON.stringify(backup, null, 2)], { type: 'application/json' });\n      const url = URL.createObjectURL(blob);\n      \n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `swaxi-backup-${new Date().toISOString().split('T')[0]}.json`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n\n      return backup;\n    } catch (error) {\n      console.error('Backup failed:', error);\n      throw error;\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/services/sharePointService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/services/shiftGenerationService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/tests/Administration.test.jsx","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":26,"fix":{"range":[25,25],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":58,"fix":{"range":[83,83],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"`../pages/Administration` import should occur before import of `./testUtils`","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":53,"fix":{"range":[26,137],"text":"import Administration from '../pages/Administration'\nimport { screen, renderWithProviders } from './testUtils'\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"import React from 'react'\nimport { screen, renderWithProviders } from './testUtils'\nimport Administration from '../pages/Administration'\n\njest.mock('../components/ShiftTemplateManager', () => {\n  const Comp = () => <div data-testid=\"shift-template-manager\">ShiftTemplateManager</div>\n  Comp.displayName = 'MockShiftTemplateManager'\n  return Comp\n})\njest.mock('../components/RoleManagement', () => {\n  const Comp = () => <div data-testid=\"role-management\">RoleManagement</div>\n  Comp.displayName = 'MockRoleManagement'\n  return Comp\n})\n\n// Provide minimal ShiftTemplateContext\njest.mock('../contexts/ShiftTemplateContext', () => {\n  const React = require('react')\n  const Ctx = React.createContext({ templates: [] })\n  const ShiftTemplateProvider = ({ children }) => <Ctx.Provider value={{ templates: [] }}>{children}</Ctx.Provider>\n  return { ShiftTemplateProvider, default: Ctx }\n})\n\ndescribe('Administration page', () => {\n  it('renders heading and child managers', () => {\n    renderWithProviders(<Administration />)\n    expect(screen.getByText('Administration')).toBeInTheDocument()\n    expect(screen.getByTestId('shift-template-manager')).toBeInTheDocument()\n    expect(screen.getByTestId('role-management')).toBeInTheDocument()\n  })\n})\n","usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/tests/Audit.test.jsx","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":26,"fix":{"range":[25,25],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":69,"fix":{"range":[94,94],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"`../pages/Audit` import should occur before import of `./testUtils`","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":35,"fix":{"range":[26,130],"text":"import Audit from '../pages/Audit'\nimport { screen, fireEvent, renderWithProviders } from './testUtils'\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"import React from 'react'\nimport { screen, fireEvent, renderWithProviders } from './testUtils'\nimport Audit from '../pages/Audit'\n\ndescribe('Audit page', () => {\n  it('renders heading and all logs initially', () => {\n    renderWithProviders(<Audit />)\n    expect(screen.getByText('Audit')).toBeInTheDocument()\n    expect(screen.getByText('Schicht erstellt')).toBeInTheDocument()\n    expect(screen.getByText('Fahrzeugstatus geändert')).toBeInTheDocument()\n    expect(screen.getByText('Urlaubsantrag eingereicht')).toBeInTheDocument()\n  })\n\n  it('filters by type', () => {\n    renderWithProviders(<Audit />)\n    fireEvent.change(screen.getByDisplayValue('Alle Aktivitäten'), { target: { value: 'create' } })\n    expect(screen.getByText('Schicht erstellt')).toBeInTheDocument()\n    expect(screen.queryByText('Fahrzeugstatus geändert')).toBeNull()\n  })\n})\n","usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/tests/AuthContext.test.jsx","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":67,"fix":{"range":[66,66],"text":"\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { render, screen, fireEvent } from '@testing-library/react'\nimport { AuthProvider } from '../contexts/AuthContext'\nimport { useAuth } from '../contexts/useAuth'\n\n// Helper component to expose context for assertions\nfunction Probe() {\n  const { user, login, logout, mockUsers } = useAuth()\n  return (\n    <div>\n      <div data-testid=\"user\">{user ? user.role : 'none'}</div>\n      <button onClick={() => login('admin')}>login-admin</button>\n      <button onClick={() => login('analyst')}>login-analyst</button>\n      <button onClick={logout}>logout</button>\n      <div data-testid=\"roles\">{Object.keys(mockUsers).join(',')}</div>\n    </div>\n  )\n}\n\ndescribe('AuthProvider', () => {\n  beforeEach(() => {\n    localStorage.clear()\n  })\n\n  test('logs in and persists user, then restores on reload', () => {\n    const { unmount } = render(<AuthProvider><Probe /></AuthProvider>)\n    fireEvent.click(screen.getByText('login-admin'))\n    expect(screen.getByTestId('user').textContent).toBe('admin')\n    // persisted\n    expect(JSON.parse(localStorage.getItem('user')).role).toBe('admin')\n\n    // Remount to simulate reload\n    unmount()\n    const { getByTestId } = render(<AuthProvider><Probe /></AuthProvider>)\n    expect(getByTestId('user').textContent).toBe('admin')\n  })\n\n  test('logout clears user and storage', () => {\n    render(<AuthProvider><Probe /></AuthProvider>)\n    fireEvent.click(screen.getByText('login-analyst'))\n    expect(screen.getByTestId('user').textContent).toBe('analyst')\n    fireEvent.click(screen.getByText('logout'))\n    expect(screen.getByTestId('user').textContent).toBe('none')\n    expect(localStorage.getItem('user')).toBeNull()\n  })\n})\n","usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/tests/AutosaveManager.test.jsx","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":61,"fix":{"range":[60,60],"text":"\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { render, screen, act } from '@testing-library/react'\nimport AutosaveManager from '../components/AutosaveManager'\nimport { ShiftProvider } from '../contexts/ShiftContext'\n\n// Speed up tests: reduce interval via jest fake timers by mocking Date.now differences\njest.useFakeTimers()\n// Silence snapshot console noise\nconst originalLog = console.log\nbeforeAll(() => { console.log = jest.fn() })\nafterAll(() => { console.log = originalLog })\n\n// Ensure unique snapshot IDs: mock Date.now to increment\nlet mockNowBase = 1700000000000\nbeforeEach(() => {\n  mockNowBase += 10000\n  jest.spyOn(Date, 'now').mockImplementation(() => (mockNowBase += 1000))\n})\nafterEach(() => {\n  jest.restoreAllMocks()\n})\n\n// Helper to seed shift state via localStorage before provider init\nfunction seedState({ shifts = [], applications = [], notifications = [] } = {}) {\n  localStorage.setItem('shifts', JSON.stringify(shifts))\n  localStorage.setItem('applications', JSON.stringify(applications))\n  localStorage.setItem('notifications', JSON.stringify(notifications))\n  localStorage.setItem('swaxi-unsaved-work', '1') // so recovery panel logic can trigger\n}\n\ndescribe('AutosaveManager', () => {\n  beforeEach(() => {\n    localStorage.clear()\n    jest.clearAllTimers()\n  })\n\n  it('creates an initial snapshot and shows autosave indicator', () => {\n    seedState({ shifts: [], applications: [], notifications: [] })\n    render(<ShiftProvider><AutosaveManager /></ShiftProvider>)\n    // After initial render effect runs, snapshot should exist\n    const snapshotsRaw = localStorage.getItem('swaxi-autosave-snapshots')\n    expect(snapshotsRaw).not.toBeNull()\n    const snapshots = JSON.parse(snapshotsRaw)\n    expect(snapshots.length).toBeGreaterThanOrEqual(1)\n    // UI indicator text\n    expect(screen.getByText(/Autosave:/i)).toBeInTheDocument()\n  })\n\n  it('adds multiple snapshots over time (interval advance)', () => {\n    seedState({ shifts: [], applications: [], notifications: [] })\n    render(<ShiftProvider><AutosaveManager /></ShiftProvider>)\n    const first = JSON.parse(localStorage.getItem('swaxi-autosave-snapshots')).length\n    // Advance time by 2 intervals\n    act(() => {\n      jest.advanceTimersByTime(60000)\n    })\n    const after = JSON.parse(localStorage.getItem('swaxi-autosave-snapshots')).length\n    expect(after).toBeGreaterThanOrEqual(Math.min(first + 2, 10)) // limited by MAX_SNAPSHOTS\n  })\n\n  it('opens recovery panel when snapshots exist & unsaved work flag present', () => {\n    seedState({ shifts: [], applications: [], notifications: [] })\n    render(<ShiftProvider><AutosaveManager /></ShiftProvider>)\n    // Timer inside component uses setTimeout 1000 -> advance\n    act(() => { jest.advanceTimersByTime(1100) })\n    // Recovery panel should appear automatically (due to unsaved work + snapshot)\n    expect(screen.getByText(/Ungespeicherte Änderungen erkannt/)).toBeInTheDocument()\n    expect(screen.getByText('Überspringen')).toBeInTheDocument()\n  })\n})\n","usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/tests/Calendar.test.jsx","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":26,"fix":{"range":[25,25],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":69,"fix":{"range":[94,94],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"`../pages/Calendar` import should occur before import of `./testUtils`","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":41,"fix":{"range":[26,136],"text":"import Calendar from '../pages/Calendar'\nimport { screen, fireEvent, renderWithProviders } from './testUtils'\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"import React from 'react'\nimport { screen, fireEvent, renderWithProviders } from './testUtils'\nimport Calendar from '../pages/Calendar'\n\njest.mock('../utils/auth', () => ({ canManageShifts: () => true }))\n\nfunction seedShifts() {\n  const today = new Date()\n  const iso = today.toISOString().slice(0,10)\n  const overnight = { id: `${iso}_Night`, date: iso, type: 'Night', start: '22:00', end: '04:00', status: 'open' }\n  const mid = { id: `${iso}_Day`, date: iso, type: 'Day', start: '10:00', end: '12:00', status: 'open' }\n  localStorage.setItem('shifts', JSON.stringify([overnight, mid]))\n}\n\ndescribe('Calendar page', () => {\n  it('renders week header and shifts', () => {\n    localStorage.clear(); seedShifts()\n    renderWithProviders(<Calendar />)\n    expect(screen.getByText('Kalender')).toBeInTheDocument()\n  expect(screen.getAllByText('Night').length).toBeGreaterThan(0)\n    expect(screen.getByText('Day')).toBeInTheDocument()\n  })\n\n  it('navigates weeks forward and back', () => {\n    localStorage.clear(); seedShifts()\n    renderWithProviders(<Calendar />)\n    const nextBtn = screen.getByRole('button', { name: 'Nächste Woche' })\n    const prevBtn = screen.getByRole('button', { name: 'Vorherige Woche' })\n    fireEvent.click(nextBtn)\n    fireEvent.click(prevBtn)\n    // Still shows header; basic smoke after navigation\n    expect(screen.getByText('Kalender')).toBeInTheDocument()\n  })\n\n  it('resets to today', () => {\n    localStorage.clear(); seedShifts()\n    renderWithProviders(<Calendar />)\n    fireEvent.click(screen.getByRole('button', { name: 'Heute' }))\n    expect(screen.getByText('Kalender')).toBeInTheDocument()\n  })\n\n  it('shows create shift button for manager role', () => {\n    localStorage.clear(); seedShifts()\n    renderWithProviders(<Calendar />)\n    expect(screen.getByRole('button', { name: 'Dienst erstellen' })).toBeInTheDocument()\n  })\n})\n","usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/tests/ConnectionStatus.test.jsx","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":67,"fix":{"range":[66,66],"text":"\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { render, screen, fireEvent } from '@testing-library/react'\nimport ConnectionStatus from '../components/ConnectionStatus'\n\njest.mock('../contexts/useShifts', () => ({\n  useShifts: jest.fn()\n}))\n\nconst { useShifts } = jest.requireMock('../contexts/useShifts')\n\nfunction setState(overrides) {\n  useShifts.mockReturnValue({\n    state: {\n      dataSource: 'localStorage',\n      isOnline: false,\n      lastSync: null,\n      ...overrides,\n    }\n  })\n}\n\ndescribe('ConnectionStatus', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  test('shows sharepoint connected state (green)', () => {\n    const lastSync = new Date('2025-08-26T12:34:56Z')\n    setState({ dataSource: 'sharePoint', isOnline: true, lastSync })\n    render(<ConnectionStatus />)\n    expect(screen.getByText('🟢')).toBeInTheDocument()\n    expect(screen.getByText('SharePoint verbunden')).toBeInTheDocument()\n    expect(screen.getByText(/Letzte Sync:/)).toBeInTheDocument()\n  })\n\n  test('shows localStorage offline mode with tip (yellow)', () => {\n    setState({ dataSource: 'localStorage', isOnline: false })\n    render(<ConnectionStatus />)\n    expect(screen.getByText('🟡')).toBeInTheDocument()\n    expect(screen.getByText('Offline-Modus (localStorage)')).toBeInTheDocument()\n    expect(screen.getByText(/Tipp:/)).toBeInTheDocument()\n  })\n\n  test('shows error state (red) when sharepoint not online', () => {\n    setState({ dataSource: 'sharePoint', isOnline: false })\n    render(<ConnectionStatus />)\n    expect(screen.getByText('🔴')).toBeInTheDocument()\n    expect(screen.getByText('Verbindungsfehler')).toBeInTheDocument()\n  })\n\n  test('clicking test button triggers handler (smoke)', () => {\n    setState({ dataSource: 'localStorage', isOnline: false })\n    render(<ConnectionStatus />)\n    const btn = screen.getByRole('button', { name: '🔗 Verbindung testen' })\n    fireEvent.click(btn)\n    // Button remains enabled after async sequence completes\n    expect(btn).toBeEnabled()\n  })\n})\n","usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/tests/Dashboard.test.jsx","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":26,"fix":{"range":[25,25],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":69,"fix":{"range":[94,94],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"`../pages/Dashboard` import should occur before import of `./testUtils`","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":43,"fix":{"range":[26,138],"text":"import Dashboard from '../pages/Dashboard'\nimport { screen, fireEvent, renderWithProviders } from './testUtils'\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"import React from 'react'\nimport { screen, fireEvent, renderWithProviders } from './testUtils'\nimport Dashboard from '../pages/Dashboard'\n\njest.mock('../utils/auth', () => ({\n  canManageShifts: () => true\n}))\n\nconst todayIso = new Date().toISOString().slice(0,10)\nconst sixDaysAgo = new Date(Date.now() - 6*24*3600*1000).toISOString().slice(0,10)\nconst baseShifts = [\n  { id: `${todayIso}_Fahrt`, date: todayIso, type: 'Fahrt', start: '08:00', end: '12:00', status: 'open' },\n  { id: `${todayIso}_Tour`, date: todayIso, type: 'Tour', start: '13:00', end: '16:00', status: 'assigned' },\n  { id: `${sixDaysAgo}_Alt`, date: sixDaysAgo, type: 'Alt', start: '09:00', end: '10:00', status: 'cancelled' }\n]\n\ndescribe('Dashboard page', () => {\n  beforeEach(() => {\n    localStorage.clear()\n    localStorage.setItem('shifts', JSON.stringify(baseShifts))\n  })\n\n  it('renders heading and analytics', () => {\n    renderWithProviders(<Dashboard />)\n    expect(screen.getByText('Dashboard')).toBeInTheDocument()\n    expect(screen.getByText('Aktuelle Dienste')).toBeInTheDocument()\n  })\n\n  it('filters by status (open, assigned, cancelled)', () => {\n    renderWithProviders(<Dashboard />)\n    // Open filter shows open badge\n    fireEvent.click(screen.getByRole('button', { name: 'Offen' }))\n    expect(screen.getAllByText('open').length).toBeGreaterThan(0)\n    // Assigned filter\n    fireEvent.click(screen.getByRole('button', { name: 'Zugewiesen' }))\n    expect(screen.getAllByText('assigned').length).toBeGreaterThan(0)\n    // Cancelled filter\n    fireEvent.click(screen.getByRole('button', { name: 'Abgesagt' }))\n    expect(screen.getAllByText('cancelled').length).toBeGreaterThan(0)\n  })\n\n  it('shows auto assign button when user can manage shifts', () => {\n    renderWithProviders(<Dashboard />)\n    expect(screen.getByRole('button', { name: /Automatisch zuteilen/ })).toBeInTheDocument()\n  })\n})\n","usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/tests/IndexedDBShiftRepository.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/tests/LiveVersionBanner.test.jsx","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":67,"fix":{"range":[66,66],"text":"\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { render, screen, fireEvent } from '@testing-library/react'\nimport LiveVersionBanner from '../components/LiveVersionBanner'\n\njest.mock('../contexts/useShifts', () => ({\n  useShifts: jest.fn()\n}))\n\nconst { useShifts } = jest.requireMock('../contexts/useShifts')\n\nfunction setState(overrides) {\n  useShifts.mockReturnValue({\n    state: {\n      dataSource: 'localStorage',\n      ...overrides,\n    }\n  })\n}\n\ndescribe('LiveVersionBanner', () => {\n  beforeEach(() => {\n    sessionStorage.clear()\n    jest.clearAllMocks()\n  })\n\n  test('renders with demo badge and localStorage icon', () => {\n    setState({ dataSource: { source: 'localStorage' } })\n    render(<LiveVersionBanner />)\n    expect(screen.getByText(/Swaxi Dispo v6.0.0/)).toBeInTheDocument()\n    expect(screen.getByText('🧪 Demo')).toBeInTheDocument()\n    expect(screen.getByText(/💾/)).toBeInTheDocument()\n  })\n\n  test('dismiss button hides banner and stores flag', () => {\n    setState({ dataSource: { source: 'localStorage' } })\n    render(<LiveVersionBanner />)\n    const btn = screen.getByRole('button', { name: 'Banner schließen' })\n    fireEvent.click(btn)\n    // After dismissal banner should be removed\n    expect(screen.queryByText(/Swaxi Dispo v6.0.0/)).not.toBeInTheDocument()\n    expect(sessionStorage.getItem('bannerDismissed')).toBe('true')\n  })\n})\n","usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/tests/Login.test.jsx","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":67,"fix":{"range":[66,66],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"There should be no empty line within import group","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":40}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { render, screen, fireEvent } from '@testing-library/react'\nimport Login from '../components/Login'\n\njest.mock('../contexts/useAuth', () => ({\n  __esModule: true,\n  useAuth: jest.fn()\n}))\n\nimport { useAuth } from '../contexts/useAuth'\n\nconst mockLogin = jest.fn()\nconst mockLogout = jest.fn()\nconst mockUsers = {\n  admin: { name: 'Admin', role: 'admin' },\n  analyst: { name: 'Analyst', role: 'analyst' }\n}\n\nfunction setAuth(user = null) {\n  useAuth.mockReturnValue({ user, login: mockLogin, logout: mockLogout, mockUsers })\n}\n\ndescribe('Login', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  test('renders role buttons when logged out and logs in on click', () => {\n    setAuth(null)\n    render(<Login />)\n    const btn = screen.getByRole('button', { name: /Login as admin/i })\n    fireEvent.click(btn)\n    expect(mockLogin).toHaveBeenCalledWith('admin')\n  })\n\n  test('shows welcome and logout when user present', () => {\n    setAuth({ name: 'Tester', role: 'admin' })\n    render(<Login />)\n    expect(screen.getByText(/Welcome, Tester/)).toBeInTheDocument()\n    fireEvent.click(screen.getByRole('button', { name: /Logout/i }))\n    expect(mockLogout).toHaveBeenCalled()\n  })\n})\n","usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/tests/Navigation.test.jsx","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":67,"fix":{"range":[66,66],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":50,"fix":{"range":[166,166],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"`react-router-dom` import should occur before import of `../components/Navigation`","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":48,"fix":{"range":[67,215],"text":"import { MemoryRouter } from 'react-router-dom'\nimport Navigation from '../components/Navigation'\nimport AuthContext from '../contexts/AuthContext'\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"import { render, screen, fireEvent } from '@testing-library/react'\nimport Navigation from '../components/Navigation'\nimport AuthContext from '../contexts/AuthContext'\nimport { MemoryRouter } from 'react-router-dom'\n\nfunction renderNav(user) {\n  const logout = jest.fn()\n  render(\n    <AuthContext.Provider value={{ user, logout }}>\n      <MemoryRouter initialEntries={['/']}>\n        <Navigation />\n      </MemoryRouter>\n    </AuthContext.Provider>\n  )\n  return { logout }\n}\n\ndescribe('Navigation', () => {\n  test('shows login link when not authenticated', () => {\n    renderNav(null)\n    expect(screen.getByRole('link', { name: /Login/i })).toBeInTheDocument()\n    expect(screen.queryByText(/Logout/)).not.toBeInTheDocument()\n  })\n\n  test('shows admin links and logout when admin', () => {\n    const { logout } = renderNav({ name: 'Admin', role: 'admin' })\n    expect(screen.getByRole('link', { name: 'Verwaltung' })).toBeInTheDocument()\n    expect(screen.getByRole('link', { name: 'Audit' })).toBeInTheDocument()\n    const btn = screen.getByRole('button', { name: /Logout \\(admin\\)/ })\n    fireEvent.click(btn)\n    expect(logout).toHaveBeenCalled()\n  })\n})\n","usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/tests/NotificationMenu.test.jsx","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":67,"fix":{"range":[106,106],"text":"\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"// Removed unused global eslint-disable\nimport { render, screen, fireEvent } from '@testing-library/react'\nimport { ShiftProvider } from '../contexts/ShiftContext'\nimport AuthContext from '../contexts/AuthContext'\nimport NotificationMenu from '../components/NotificationMenu'\n\ndescribe('NotificationMenu', () => {\n  const authValue = { user: { name: 'Tester', role: 'admin' } }\n  const wrapper = (children) => render(\n    <AuthContext.Provider value={authValue}>\n      <ShiftProvider>\n        {children}\n      </ShiftProvider>\n    </AuthContext.Provider>\n  )\n\n  it('marks single notification read', () => {\n    localStorage.setItem('shifts', JSON.stringify([]))\n    localStorage.setItem('notifications', JSON.stringify([\n      { id: 'n1', title: 'Test', message: 'Message', timestamp: 'now', isRead: false }\n    ]))\n    wrapper(<NotificationMenu />)\n    fireEvent.click(screen.getByRole('button', { name: /view notifications/i }))\n    const markBtn = screen.getByText('Gelesen')\n    fireEvent.click(markBtn)\n    // button should disappear after marking read\n    expect(screen.queryByText('Gelesen')).toBeNull()\n  })\n\n  it('marks all notifications read', () => {\n    localStorage.setItem('shifts', JSON.stringify([]))\n    localStorage.setItem('notifications', JSON.stringify([\n      { id: 'n1', title: 'Test1', message: 'Message', timestamp: 'now', isRead: false },\n      { id: 'n2', title: 'Test2', message: 'Message', timestamp: 'now', isRead: false }\n    ]))\n    wrapper(<NotificationMenu />)\n    fireEvent.click(screen.getByRole('button', { name: /view notifications/i }))\n    fireEvent.click(screen.getByText('Alle gelesen'))\n    expect(screen.queryAllByText('Gelesen').length).toBe(0)\n  })\n})\n","usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/tests/RoleManagement.test.jsx","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":67,"fix":{"range":[66,66],"text":"\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { render, screen, fireEvent } from '@testing-library/react'\nimport RoleManagement from '../components/RoleManagement'\nimport { ROLES } from '../utils/constants'\n\nconst users = [\n  { id: '1', name: 'Alice', role: ROLES.ADMIN },\n  { id: '2', name: 'Bob', role: ROLES.DISPONENT },\n]\n\nconst onUpdateRole = jest.fn()\n\ndescribe('RoleManagement', () => {\n  beforeEach(() => { jest.clearAllMocks() })\n\n  test('renders users and allows editing manageable role', () => {\n    render(<RoleManagement users={users} onUpdateRole={onUpdateRole} />)\n    // Bob can manage shifts (disponent? actually canManageShifts returns false for disponent) so only Alice shows button\n    const buttons = screen.getAllByText(/Bearbeiten/)\n    expect(buttons.length).toBeGreaterThan(0)\n    fireEvent.click(buttons[0])\n    const select = screen.getByDisplayValue(users[0].role)\n    fireEvent.change(select, { target: { value: ROLES.CHIEF } })\n    expect(onUpdateRole).toHaveBeenCalledWith('1', ROLES.CHIEF)\n  })\n})\n","usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/tests/SeriesApplicationModal.test.jsx","messages":[{"ruleId":"import/order","severity":1,"message":"`./testUtils` import should occur after import of `../contexts/useShifts`","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":48,"fix":{"range":[0,279],"text":"import { renderWithProviders } from './testUtils'\nimport SeriesApplicationModal from '../components/SeriesApplicationModal'\nimport { SHIFT_STATUS } from '../utils/constants'\nimport * as useShiftsModule from '../contexts/useShifts'\nimport { screen, fireEvent } from './testUtils'\n"}},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":50,"fix":{"range":[97,97],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"`./testUtils` import should occur after import of `../contexts/useShifts`","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":50,"fix":{"range":[48,279],"text":"import SeriesApplicationModal from '../components/SeriesApplicationModal'\nimport { SHIFT_STATUS } from '../utils/constants'\nimport * as useShiftsModule from '../contexts/useShifts'\nimport { renderWithProviders } from './testUtils'\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"import { screen, fireEvent } from './testUtils'\nimport { renderWithProviders } from './testUtils'\nimport SeriesApplicationModal from '../components/SeriesApplicationModal'\nimport { SHIFT_STATUS } from '../utils/constants'\nimport * as useShiftsModule from '../contexts/useShifts'\n\n// Mock useShifts to observe applyToSeries calls without full provider complexity\nconst mockApplyToSeries = jest.fn()\n\njest.spyOn(useShiftsModule, 'useShifts').mockImplementation(() => ({ applyToSeries: mockApplyToSeries }))\n\nfunction makeShift(id, dateStr, type='evening') {\n  return { id, date: new Date(dateStr), type, start: '18:00', end: '20:00', status: SHIFT_STATUS.OPEN }\n}\n\ndescribe('SeriesApplicationModal', () => {\n  beforeEach(() => {\n    mockApplyToSeries.mockClear()\n  })\n\n  it('renders available shifts and allows selecting multiple via type shortcut', () => {\n    const shifts = [\n      makeShift('s1', '2025-08-25', 'evening'),\n      makeShift('s2', '2025-08-26', 'evening'),\n      makeShift('s3', '2025-08-27', 'night'),\n    ]\n    renderWithProviders(<SeriesApplicationModal isOpen onClose={() => {}} shifts={shifts} />)\n\n    // 3 checkboxes for open shifts\n    const boxes = screen.getAllByRole('checkbox')\n    expect(boxes.length).toBe(3)\n\n    // Click shortcut for all evening shifts\n    fireEvent.click(screen.getByText(/Alle Abend-Dienste/i))\n\n    // Both evening shifts selected\n    expect(boxes[0]).toBeChecked()\n    expect(boxes[1]).toBeChecked()\n    expect(boxes[2]).not.toBeChecked()\n\n    // Submit\n    fireEvent.click(screen.getByText('Bewerben'))\n    expect(mockApplyToSeries).toHaveBeenCalledTimes(1)\n    const [ids, user] = mockApplyToSeries.mock.calls[0]\n    expect(ids.sort()).toEqual(['s1','s2'])\n    expect(user).toBe('current-user')\n  })\n\n  it('disables submit when no selection and enables after selecting one', () => {\n    const shifts = [makeShift('s1', '2025-08-25', 'evening')]\n    renderWithProviders(<SeriesApplicationModal isOpen onClose={() => {}} shifts={shifts} />)\n    const submit = screen.getByText('Bewerben')\n    expect(submit).toBeDisabled()\n    fireEvent.click(screen.getByRole('checkbox'))\n    expect(submit).not.toBeDisabled()\n  })\n})\n","usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/tests/ShiftAssignNotifications.test.jsx","messages":[],"suppressedMessages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":76,"fix":{"range":[96,96],"text":"\n"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useShifts\" is called in function \"_ShiftConsumer\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":18,"column":24,"nodeType":"Identifier","endLine":18,"endColumn":33,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/tests/ShiftContext.test.jsx","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":76,"fix":{"range":[75,75],"text":"\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { render, screen, fireEvent, waitFor } from '@testing-library/react'\nimport { ShiftProvider } from '../contexts/ShiftContext'\nimport { AuthProvider } from '../contexts/AuthContext'\nimport { ShiftTemplateProvider } from '../contexts/ShiftTemplateContext'\nimport { useShifts } from '../contexts/useShifts'\n\nfunction Probe() {\n  const { state, applyToShift, assignShift, updateShiftStatus, getOpenShifts, getConflictedShifts } = useShifts()\n  return (\n    <div>\n      <div data-testid=\"count\">{state.shifts.length}</div>\n      <div data-testid=\"open-count\">{getOpenShifts().length}</div>\n      <div data-testid=\"conflicted-count\">{getConflictedShifts().length}</div>\n      <button onClick={() => {\n        const first = state.shifts[0]\n        applyToShift(first.id, 'u1')\n      }}>apply-first</button>\n      <button onClick={() => {\n        const first = state.shifts[0]\n        assignShift(first.id, 'u2')\n      }}>assign-first</button>\n      <button onClick={() => {\n        const first = state.shifts[0]\n        updateShiftStatus(first.id, 'closed')\n      }}>close-first</button>\n    </div>\n  )\n}\n\ndescribe('ShiftContext integration basics', () => {\n  test('initializes shifts and supports core actions', async () => {\n    render(\n      <AuthProvider>\n        <ShiftTemplateProvider>\n          <ShiftProvider>\n            <Probe />\n          </ShiftProvider>\n        </ShiftTemplateProvider>\n      </AuthProvider>\n    )\n    await waitFor(() => {\n      const count = Number(screen.getByTestId('count').textContent)\n      expect(count).toBeGreaterThan(0)\n    })\n    const count = Number(screen.getByTestId('count').textContent)\n\n    // Apply to first shift\n    fireEvent.click(screen.getByText('apply-first'))\n    // Assign first shift\n    fireEvent.click(screen.getByText('assign-first'))\n    // Close first shift\n    fireEvent.click(screen.getByText('close-first'))\n\n    // Open count should be <= total\n    const openCount = Number(screen.getByTestId('open-count').textContent)\n    expect(openCount).toBeLessThanOrEqual(count)\n  })\n})\n","usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/tests/ShiftContextCore.reducer.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/tests/ShiftTable.actions.test.jsx","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":69,"fix":{"range":[68,68],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"`./testUtils` import should occur after import of `../contexts/useShifts`","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":69,"fix":{"range":[0,292],"text":"import ShiftTable from '../components/ShiftTable'\nimport AuthContext from '../contexts/AuthContext'\nimport { SHIFT_STATUS, WORK_LOCATIONS } from '../utils/constants'\nimport * as useShiftsModule from '../contexts/useShifts'\nimport { renderWithProviders, screen, fireEvent } from './testUtils'\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"import { renderWithProviders, screen, fireEvent } from './testUtils'\nimport ShiftTable from '../components/ShiftTable'\nimport AuthContext from '../contexts/AuthContext'\nimport { SHIFT_STATUS, WORK_LOCATIONS } from '../utils/constants'\nimport * as useShiftsModule from '../contexts/useShifts'\n\n// Mock useShifts to track calls without full provider overhead\nconst mockApplyToShift = jest.fn()\nconst mockAssignShift = jest.fn()\nconst mockDispatch = jest.fn()\n\njest.spyOn(useShiftsModule, 'useShifts').mockImplementation(() => ({\n  dispatch: mockDispatch,\n  applyToShift: mockApplyToShift,\n  assignShift: mockAssignShift,\n}))\n\ndescribe('ShiftTable actions', () => {\n  beforeEach(() => {\n    mockApplyToShift.mockClear()\n    mockAssignShift.mockClear()\n    mockDispatch.mockClear()\n  })\n\n  const baseShift = (overrides = {}) => ({\n    id: 's1',\n    date: new Date('2025-08-25'),\n    start: '09:00',\n    end: '17:00',\n    status: SHIFT_STATUS.OPEN,\n    assignedTo: null,\n    workLocation: WORK_LOCATIONS.OFFICE,\n    conflicts: [],\n    ...overrides,\n  })\n\n  it('invokes applyToShift when Bewerben clicked', () => {\n    const shifts = [baseShift()]\n    renderWithProviders(\n      <AuthContext.Provider value={{ user: { name: 'Tester', role: 'disponent' }}}>\n        <ShiftTable shifts={shifts} />\n      </AuthContext.Provider>\n    )\n    fireEvent.click(screen.getByText('Bewerben'))\n    expect(mockApplyToShift).toHaveBeenCalledWith('s1', 'Tester')\n  })\n\n  it('invokes assignShift when Zuweisen clicked for manager role', () => {\n    const shifts = [baseShift()]\n    renderWithProviders(\n      <AuthContext.Provider value={{ user: { name: 'Lead', role: 'chief' }}}>\n        <ShiftTable shifts={shifts} />\n      </AuthContext.Provider>\n    )\n    fireEvent.click(screen.getByText('Zuweisen'))\n    expect(mockAssignShift).toHaveBeenCalledWith('s1', 'Lead')\n  })\n\n  it('dispatches cancellation when Absagen clicked on assigned shift', () => {\n    const shifts = [baseShift({ status: SHIFT_STATUS.ASSIGNED, assignedTo: 'Tester' })]\n    renderWithProviders(\n      <AuthContext.Provider value={{ user: { name: 'Chief', role: 'chief' }}}>\n        <ShiftTable shifts={shifts} />\n      </AuthContext.Provider>\n    )\n    fireEvent.click(screen.getByText('Absagen'))\n    expect(mockDispatch).toHaveBeenCalledWith(expect.objectContaining({\n      type: 'UPDATE_SHIFT',\n      payload: expect.objectContaining({ status: SHIFT_STATUS.CANCELLED })\n    }))\n  })\n})\n","usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/tests/ShiftTable.test.jsx","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":68,"fix":{"range":[67,67],"text":"\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { render, screen, fireEvent } from '@testing-library/react';\nimport ShiftTable from '../components/ShiftTable'; // used in JSX\nimport { ShiftContext } from '../contexts/ShiftContext'; // used in provider\n\ndescribe('ShiftTable', () => {\n  // reference to avoid unused warnings in strict lint setup\n  expect(ShiftTable).toBeTruthy();\n  expect(ShiftContext).toBeTruthy();\n  const mockShifts = [\n    {\n      id: 1,\n      date: new Date('2025-08-25'),\n      start: '09:00',\n      end: '17:00',\n      status: 'open',\n    },\n  ];\n\n  const mockDispatch = jest.fn();\n\n  const renderShiftTable = (shifts = mockShifts) => render(\n    <ShiftContext.Provider value={{ dispatch: mockDispatch, applyToShift: jest.fn() }}>\n      <ShiftTable shifts={shifts} />\n    </ShiftContext.Provider>\n  );\n\n  it('renders shifts correctly', () => {\n    renderShiftTable();\n  expect(screen.getByText(/25/)).toBeInTheDocument();\n  expect(screen.getByText(/09:00-17:00/)).toBeInTheDocument();\n  });\n\n  it('handles apply action', () => {\n    renderShiftTable();\n    const applyButton = screen.getByText('Bewerben');\n    fireEvent.click(applyButton);\n    // Add your assertions here\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/tests/ShiftTemplateManager.test.jsx","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":67,"fix":{"range":[66,66],"text":"\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { render, screen, fireEvent } from '@testing-library/react'\nimport ShiftTemplateManager from '../components/ShiftTemplateManager'\n\njest.mock('../contexts/useShiftTemplates', () => ({\n  useShiftTemplates: jest.fn()\n}))\n\nconst { useShiftTemplates } = jest.requireMock('../contexts/useShiftTemplates')\n\nconst templates = [\n  { id: '1', name: 'Morning', startTime: '08:00', endTime: '12:00', days: ['Mo','Tu'] },\n]\nconst addTemplate = jest.fn()\nconst updateTemplate = jest.fn()\nconst deleteTemplate = jest.fn()\n\nfunction setup() {\n  useShiftTemplates.mockReturnValue({ templates, addTemplate, updateTemplate, deleteTemplate })\n  render(<ShiftTemplateManager />)\n}\n\ndescribe('ShiftTemplateManager', () => {\n  beforeEach(() => { jest.clearAllMocks() })\n\n  test('adds a new template', () => {\n    setup()\n  fireEvent.change(screen.getByPlaceholderText('Template Name'), { target: { value: 'Late' } })\n  fireEvent.change(screen.getByRole('textbox', { name: '' }), { target: { value: 'Late' } })\n  // Target time inputs via their type attribute selectors\n  const timeInputs = screen.getAllByDisplayValue('')\n  fireEvent.change(timeInputs[0], { target: { value: '13:00' } })\n  fireEvent.change(timeInputs[1], { target: { value: '17:00' } })\n    fireEvent.click(screen.getByRole('button', { name: 'Mo' }))\n    fireEvent.click(screen.getByRole('button', { name: 'Add Template' }))\n    expect(addTemplate).toHaveBeenCalledWith({ name: 'Late', startTime: '13:00', endTime: '17:00', days: ['Mo'] })\n  })\n\n  test('edits existing template', () => {\n    setup()\n    fireEvent.click(screen.getByRole('button', { name: 'Edit' }))\n    const nameInput = screen.getByDisplayValue('Morning')\n    fireEvent.change(nameInput, { target: { value: 'Morning Shift' } })\n    fireEvent.click(screen.getByRole('button', { name: 'Update Template' }))\n    expect(updateTemplate).toHaveBeenCalledWith(expect.objectContaining({ id: '1', name: 'Morning Shift' }))\n  })\n\n  test('deletes template', () => {\n    setup()\n    fireEvent.click(screen.getByRole('button', { name: 'Delete' }))\n    expect(deleteTemplate).toHaveBeenCalledWith('1')\n  })\n})\n","usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/tests/TestPage.test.jsx","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":26,"fix":{"range":[25,25],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":74,"fix":{"range":[99,99],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"`../pages/TestPage` import should occur before import of `./testUtils`","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":41,"fix":{"range":[26,141],"text":"import TestPage from '../pages/TestPage'\nimport { screen, fireEvent, renderWithProviders, act } from './testUtils'\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"import React from 'react'\nimport { screen, fireEvent, renderWithProviders, act } from './testUtils'\nimport TestPage from '../pages/TestPage'\n\n// Mock sharePointService methods used\njest.mock('../services/sharePointService', () => ({\n  sharePointService: {\n    isSharePointAvailable: jest.fn().mockResolvedValue(false),\n    getShifts: jest.fn().mockResolvedValue([]),\n    logAudit: jest.fn().mockResolvedValue(undefined),\n    createShift: jest.fn().mockResolvedValue({ id: 'test-id' })\n  }\n}))\n\n// Mock useShifts hook directly (simpler & avoids context shape coupling)\njest.mock('../contexts/useShifts', () => ({\n  useShifts: () => ({\n    state: { dataSource: 'localStorage', isOnline: false, shifts: [] }\n  })\n}))\n\ndescribe('TestPage', () => {\n  it('renders heading and status blocks', () => {\n    renderWithProviders(<TestPage />)\n    expect(screen.getByText('Hybrid-Modus Testen')).toBeInTheDocument()\n    expect(screen.getByText(/Datenquelle/)).toBeInTheDocument()\n  })\n\n  it('runs tests and shows results', async () => {\n    renderWithProviders(<TestPage />)\n    await act(async () => {\n      fireEvent.click(screen.getByRole('button', { name: '🚀 Alle Tests starten' }))\n    })\n    expect(screen.getByText('Test-Ergebnisse')).toBeInTheDocument()\n  })\n})\n","usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/tests/ThemeToggle.test.jsx","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":67,"fix":{"range":[66,66],"text":"\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { render, screen, fireEvent } from '@testing-library/react'\nimport { ThemeProvider } from '../contexts/ThemeContext'\nimport ThemeToggle from '../components/ThemeToggle'\n\n// Simple helper to render with ThemeProvider only (no auth/shift needed)\nfunction renderWithTheme(ui) {\n  return render(<ThemeProvider>{ui}</ThemeProvider>)\n}\n\ndescribe('ThemeToggle', () => {\n  test('renders moon icon initially (light mode) and toggles to sun icon (dark mode)', () => {\n    renderWithTheme(<ThemeToggle />)\n\n    // Initial state: light -> moon icon visible\n    expect(screen.getByTestId('moon-icon')).toBeInTheDocument()\n\n    const btn = screen.getByRole('button', { name: /toggle theme/i })\n    fireEvent.click(btn)\n\n    // After toggle: dark -> sun icon visible\n    expect(screen.getByTestId('sun-icon')).toBeInTheDocument()\n  })\n\n  test('sets data-theme attribute on documentElement when toggled', () => {\n    renderWithTheme(<ThemeToggle />)\n    const btn = screen.getByRole('button', { name: /toggle theme/i })\n\n    // Starts as light\n    expect(document.documentElement.dataset.theme).toBe('light')\n\n    fireEvent.click(btn)\n    expect(document.documentElement.dataset.theme).toBe('dark')\n\n    fireEvent.click(btn)\n    expect(document.documentElement.dataset.theme).toBe('light')\n  })\n})\n","usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/tests/accessibility.test.jsx","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":50,"fix":{"range":[49,49],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"`./testUtils` import should occur after import of `react-router-dom`","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":50,"fix":{"range":[0,175],"text":"import App from '../App'\nimport { axe, toHaveNoViolations } from 'jest-axe'\nimport { BrowserRouter } from 'react-router-dom'\nimport { renderWithProviders } from './testUtils'\n"}},{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":25,"fix":{"range":[74,74],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"`../App` import should occur after import of `react-router-dom`","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":25,"fix":{"range":[50,175],"text":"import { axe, toHaveNoViolations } from 'jest-axe'\nimport { BrowserRouter } from 'react-router-dom'\nimport App from '../App'\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":"import { renderWithProviders } from './testUtils'\nimport App from '../App'\nimport { axe, toHaveNoViolations } from 'jest-axe'\nimport { BrowserRouter } from 'react-router-dom'\n\nexpect.extend(toHaveNoViolations)\n\ndescribe('Accessibility smoke test', () => {\n  it('has no obvious a11y violations on dashboard route', async () => {\n    const { container } = renderWithProviders(\n      <BrowserRouter basename=\"/swaxi-dispo-v6\">\n        <App />\n      </BrowserRouter>\n    )\n    // Wait a tick for skeleton to swap out\n    await new Promise(r => setTimeout(r, 70))\n    const results = await axe(container)\n    expect(results).toHaveNoViolations()\n  })\n})\n","usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/tests/authPermissions.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/tests/migrationService.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/tests/onlineStatus.test.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/tests/sharePointService.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/tests/shiftCreation.integration.test.jsx","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":76,"fix":{"range":[75,75],"text":"\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { render, screen, fireEvent, waitFor } from '@testing-library/react'\nimport { ShiftProvider } from '../contexts/ShiftContext'\nimport { ShiftTemplateProvider } from '../contexts/ShiftTemplateContext'\nimport AuthContext from '../contexts/AuthContext'\nimport { ThemeProvider } from '../contexts/ThemeContext'\nimport ShiftTemplateManager from '../components/ShiftTemplateManager'\nimport Dashboard from '../pages/Dashboard'\n\n// Integration test: user adds a template (\"Schicht anlegen\") and a corresponding shift is generated for today\n// based on the template's selected weekday.\n\ndescribe('Shift creation via template (Schicht anlegen)', () => {\n  const fixedNow = new Date('2025-08-26T09:00:00Z') // Tuesday -> weekday code 'Tu'\n\n  beforeAll(() => {\n    jest.useFakeTimers()\n    jest.setSystemTime(fixedNow)\n  })\n  afterAll(() => {\n    jest.useRealTimers()\n  })\n  beforeEach(() => {\n    localStorage.clear()\n  })\n\n  function renderApp() {\n    return render(\n      <AuthContext.Provider value={{ user: { name: 'Admin', role: 'admin' }}}>\n        <ThemeProvider>\n          <ShiftTemplateProvider>\n            <ShiftProvider>\n              <div>\n                <ShiftTemplateManager />\n                <Dashboard />\n              </div>\n            </ShiftProvider>\n          </ShiftTemplateProvider>\n        </ThemeProvider>\n      </AuthContext.Provider>\n    )\n  }\n\n  it('generates a shift for today after adding a template including today\\'s weekday', async () => {\n    renderApp()\n\n    // Fill template form\n    fireEvent.change(screen.getByPlaceholderText('Template Name'), { target: { value: 'TestTemplate' } })\n    const timeInputs = screen.getAllByDisplayValue('')\n    fireEvent.change(timeInputs[0], { target: { value: '10:00' } })\n    fireEvent.change(timeInputs[1], { target: { value: '11:00' } })\n\n    // Select weekday 'Tu' (Tuesday)\n    fireEvent.click(screen.getByRole('button', { name: 'Tu' }))\n\n    // Submit\n    fireEvent.click(screen.getByRole('button', { name: 'Add Template' }))\n\n    // After adding template, ShiftContext effect should create new shift(s) including one with 10:00-11:00 today\n    await waitFor(() => {\n      expect(screen.getAllByText(/10:00-11:00/).length).toBeGreaterThan(0)\n    })\n  })\n})\n","usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/tests/shiftGenerationService.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/tests/testUtils.jsx","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":80,"fix":{"range":[79,79],"text":"\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { render, screen, fireEvent, act, within } from '@testing-library/react'\nimport AuthContext from '../contexts/AuthContext'\nimport { ShiftProvider } from '../contexts/ShiftContext'\nimport { ThemeProvider } from '../contexts/ThemeContext'\n\n/**\n * Unified test render with common providers.\n * Options:\n *  - authUser: { name, role }\n *  - shiftOverrides: function to run after initial render for additional state tweaks (receives window.localStorage or dispatch via custom TODO)\n */\nexport function renderWithProviders(ui, { authUser = { name: 'Tester', role: 'admin' }, ...renderOptions } = {}) {\n  return render(\n    <AuthContext.Provider value={{ user: authUser }}>\n      <ThemeProvider>\n        <ShiftProvider>\n          {ui}\n        </ShiftProvider>\n      </ThemeProvider>\n    </AuthContext.Provider>,\n    renderOptions\n  )\n}\n\n// Re-export RTL helpers for convenience\nexport { render, screen, fireEvent, act, within }\n","usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/tests/validation.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/utils/auth.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/utils/constants.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/utils/logger.js","messages":[],"suppressedMessages":[{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":9,"column":46,"nodeType":"Identifier","messageId":"undef","endLine":9,"endColumn":53,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/utils/shifts.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/src/utils/validation.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/tailwind.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/vonwillert/Documents/GitHub/swaxi-dispo-v6/vite.config.js","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":42,"fix":{"range":[78,78],"text":"\n"}},{"ruleId":"import/order","severity":1,"message":"`node:child_process` import should occur before import of `vite`","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":47,"fix":{"range":[0,126],"text":"import { execSync } from 'node:child_process';\nimport { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\n"}},{"ruleId":"import/order","severity":1,"message":"`node:fs` import should occur before import of `vite`","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":40,"fix":{"range":[0,166],"text":"import { readFileSync } from 'node:fs';\nimport { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\nimport { execSync } from 'node:child_process';\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"import { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\nimport { execSync } from 'node:child_process';\nimport { readFileSync } from 'node:fs';\n\nconst pkg = JSON.parse(readFileSync(new URL('./package.json', import.meta.url)));\n\n// Derive git metadata for dynamic version display\nconst gitCommit = (() => {\n  try { return execSync('git rev-parse --short HEAD').toString().trim(); } catch { return 'unknown'; }\n})();\nconst gitCount = (() => {\n  try { return execSync('git rev-list --count HEAD').toString().trim(); } catch { return '0'; }\n})();\n// Values will be inlined at build time via define\nconst buildMeta = {\n  version: pkg.version,\n  commit: gitCommit,\n  build: gitCount,\n  buildTime: new Date().toISOString()\n};\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n  define: {\n    __APP_VERSION__: JSON.stringify(buildMeta.version),\n    __APP_COMMIT__: JSON.stringify(buildMeta.commit),\n    __APP_BUILD__: JSON.stringify(buildMeta.build),\n    __APP_BUILD_TIME__: JSON.stringify(buildMeta.buildTime)\n  },\n  base: '/swaxi-dispo-v6/',\n  server: {\n    port: 5173,\n    open: true\n  },\n  css: {\n    devSourcemap: true,\n    modules: {\n      localsConvention: 'camelCase'\n    }\n  },\n  build: {\n    cssMinify: true,\n    sourcemap: true,\n    rollupOptions: {\n      output: {\n        manualChunks: {\n          vendor: ['react', 'react-dom'],\n          router: ['react-router-dom'],\n          ui: ['@headlessui/react', '@heroicons/react']\n        }\n      }\n    },\n    // Optimize bundle size\n    chunkSizeWarningLimit: 1000,\n    target: 'esnext',\n    minify: 'terser',\n    terserOptions: {\n      compress: {\n        drop_console: true,\n        drop_debugger: true\n      }\n    }\n  },\n  // Performance optimizations\n  optimizeDeps: {\n    include: ['react', 'react-dom', 'react-router-dom']\n  }\n});","usedDeprecatedRules":[]}]
